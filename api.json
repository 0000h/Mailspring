{
  "classes": {
    "Account": {
      "name": "Account",
      "superClass": "Model",
      "filename": "src/flux/models/account.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/account.coffee#L30",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "usesLabels",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/account.coffee#L57",
          "visibility": "Public",
          "summary": "The current organization_unit used by the account. ",
          "description": "The current organization_unit used by the account. "
        },
        {
          "name": "displayProvider",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/account.coffee#L62",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the localized, properly capitalized provider name,\nlike Gmail, Exchange, or Outlook 365"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Account model represents a Account served by the Nylas Platform API.\nEvery object on the Nylas platform exists within a Account, which typically represents\nan email account.",
      "description": "The Account model represents a Account served by the Nylas Platform API.\nEvery object on the Nylas platform exists within a Account, which typically represents\nan email account.\n\nFor more information about Accounts on the Nylas Platform, read the\n[Account API Documentation](https://nylas.com/docs/api#Account)\n\n## Attributes\n\n`name`: {AttributeString} The name of the Account.\n\n`provider`: {AttributeString} The Account's mail provider  (ie: `gmail`)\n\n`emailAddress`: {AttributeString} The Account's email address\n(ie: `ben@nylas.com`). Queryable.\n\n`organizationUnit`: {AttributeString} Either \"label\" or \"folder\".\nDepending on the provider, the account may be organized by folders or\nlabels.\n\nThis class also inherits attributes from {Model}\n\nSection: Models"
    },
    "AccountStore": {
      "name": "AccountStore",
      "filename": "src/flux/stores/account-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/account-store.coffee#L20",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "items",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/account-store.coffee#L88",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Account} objects"
            }
          ]
        },
        {
          "name": "itemWithEmailAddress",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/account-store.coffee#L92",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Account",
              "description": "Returns the {Account} for the given email address, or null."
            }
          ]
        },
        {
          "name": "current",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/account-store.coffee#L97",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Account",
              "description": "Returns the currently active {Account}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The AccountStore listens to changes to the available accounts in\nthe database and exposes the currently active Account via {::current}",
      "description": "The AccountStore listens to changes to the available accounts in\nthe database and exposes the currently active Account via {::current}\n\nSection: Stores"
    },
    "Actions": {
      "name": "Actions",
      "filename": "src/flux/actions.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L59",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "didPassivelyReceiveNewModels",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L75",
          "visibility": "Public",
          "summary": "Fired when the Nylas API Connector receives new data from the API.",
          "description": "Fired when the Nylas API Connector receives new data from the API.\n\n*Scope: Global*\n\nReceives an {Object} of {Array}s of {Model}s, for example:\n\n```json\n{\n  'thread': [<Thread>, <Thread>]\n  'contact': [<Contact>]\n}\n```"
        },
        {
          "name": "queueTask",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L92",
          "visibility": "Public",
          "summary": "Queue a {Task} object to the {TaskQueue}.",
          "description": "Queue a {Task} object to the {TaskQueue}.\n\n*Scope: Work Window*"
        },
        {
          "name": "dequeueAllTasks",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L101",
          "visibility": "Public",
          "summary": "Dequeue all {Task}s from the {TaskQueue}. Use with care.",
          "description": "Dequeue all {Task}s from the {TaskQueue}. Use with care.\n\n*Scope: Work Window*"
        },
        {
          "name": "dequeueMatchingTask",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L109",
          "visibility": "Public",
          "summary": "Dequeue a {Task} matching the description provided.",
          "description": "Dequeue a {Task} matching the description provided.\n\n*Scope: Work Window*"
        },
        {
          "name": "retryInitialSync",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L126",
          "visibility": "Public",
          "summary": "Retry the initial sync",
          "description": "Retry the initial sync\n\n*Scope: Work Window*"
        },
        {
          "name": "openPreferences",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L134",
          "visibility": "Public",
          "summary": "Open the preferences window. Pass an object with a tab name\n(ie: `{tab: 'Accounts'}`) to open a specific panel.",
          "description": "Open the preferences window. Pass an object with a tab name\n(ie: `{tab: 'Accounts'}`) to open a specific panel.\n\n*Scope: Window*"
        },
        {
          "name": "registerPreferencesTab",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L141",
          "visibility": "Public",
          "summary": "Register a preferences tab, usually applied in Preferences window",
          "description": "Register a preferences tab, usually applied in Preferences window\n\n*Scope: Window*"
        },
        {
          "name": "clearDeveloperConsole",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L148",
          "visibility": "Public",
          "summary": "Clear the developer console for the current window.",
          "description": "Clear the developer console for the current window.\n\n*Scope: Window*"
        },
        {
          "name": "selectAccountId",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L155",
          "visibility": "Public",
          "summary": "Select the provided account ID in the current window.",
          "description": "Select the provided account ID in the current window.\n\n*Scope: Window*"
        },
        {
          "name": "selectRootSheet",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L167",
          "visibility": "Public",
          "summary": "Select the provided sheet in the current window. This action changes\nthe top level sheet.",
          "description": "Select the provided sheet in the current window. This action changes\nthe top level sheet.\n\n*Scope: Window*\n\n```\nActions.selectRootSheet(WorkspaceStore.Sheet.Threads)\n```"
        },
        {
          "name": "toggleWorkspaceLocationHidden",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L177",
          "visibility": "Public",
          "summary": "Toggle whether a particular column is visible. Call this action\nwith one of the Sheet location constants:",
          "description": "Toggle whether a particular column is visible. Call this action\nwith one of the Sheet location constants:\n\n```\nActions.toggleWorkspaceLocationHidden(WorkspaceStore.Location.MessageListSidebar)\n```"
        },
        {
          "name": "setCursorPosition",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L190",
          "visibility": "Public",
          "summary": "Focus the keyboard on an item in a collection. This action moves the\n`keyboard focus` element in lists and other components,  but does not change\nthe focused DOM element.",
          "description": "Focus the keyboard on an item in a collection. This action moves the\n`keyboard focus` element in lists and other components,  but does not change\nthe focused DOM element.\n\n*Scope: Window*\n\n```\nActions.setCursorPosition(collection: 'thread', item: <Thread>)\n```"
        },
        {
          "name": "setFocus",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L202",
          "visibility": "Public",
          "summary": "Focus on an item in a collection. This action changes the selection\nin lists and other components, but does not change the focused DOM element.",
          "description": "Focus on an item in a collection. This action changes the selection\nin lists and other components, but does not change the focused DOM element.\n\n*Scope: Window*\n\n```\nActions.setFocus(collection: 'thread', item: <Thread>)\n```"
        },
        {
          "name": "focusMailView",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L213",
          "visibility": "Public",
          "summary": "Focus the interface on a specific {Category}.",
          "description": "Focus the interface on a specific {Category}.\n\n*Scope: Window*\n\n```\nActions.focusMailView(<Category>)\n```"
        },
        {
          "name": "toggleMessageIdExpanded",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L226",
          "visibility": "Public",
          "summary": "If the message with the provided id is currently beign displayed in the\nthread view, this action toggles whether it's full content or snippet is shown.",
          "description": "If the message with the provided id is currently beign displayed in the\nthread view, this action toggles whether it's full content or snippet is shown.\n\n*Scope: Window*\n\n```\nmessage = <Message>\nActions.toggleMessageIdExpanded(message.id)\n```"
        },
        {
          "name": "composeReply",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L243",
          "visibility": "Public",
          "summary": "Create a new reply to the provided threadId and messageId. Note that\nthis action does not focus on the thread, so you may not be able to see the new draft\nunless you also call {::setFocus}.",
          "description": "Create a new reply to the provided threadId and messageId. Note that\nthis action does not focus on the thread, so you may not be able to see the new draft\nunless you also call {::setFocus}.\n\n*Scope: Window*\n\n```\n# Compose a reply to the last message in the thread\nActions.composeReply({threadId: '123'})\n\n# Compose a reply to a specific message in the thread\nActions.composeReply({threadId: '123', messageId: '123'})\n```"
        },
        {
          "name": "composeForward",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L251",
          "visibility": "Public",
          "summary": "Create a new draft for forwarding the provided threadId and messageId. See\n{::composeReply} for parameters and behavior.",
          "description": "Create a new draft for forwarding the provided threadId and messageId. See\n{::composeReply} for parameters and behavior.\n\n*Scope: Window*"
        },
        {
          "name": "composeReplyAll",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L259",
          "visibility": "Public",
          "summary": "Create a new draft and \"reply all\" to the provided threadId and messageId. See\n{::composeReply} for parameters and behavior.",
          "description": "Create a new draft and \"reply all\" to the provided threadId and messageId. See\n{::composeReply} for parameters and behavior.\n\n*Scope: Window*"
        },
        {
          "name": "composePopoutDraft",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L272",
          "visibility": "Public",
          "summary": "Pop out the draft with the provided ID so the user can edit it in another\nwindow.",
          "description": "Pop out the draft with the provided ID so the user can edit it in another\nwindow.\n\n*Scope: Window*\n\n```\nmessageId = '123'\nActions.composePopoutDraft(messageId)\n```"
        },
        {
          "name": "composeNewBlankDraft",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L283",
          "visibility": "Public",
          "summary": "Open a new composer window for creating a new draft from scratch.",
          "description": "Open a new composer window for creating a new draft from scratch.\n\n*Scope: Window*\n\n```\nActions.composeNewBlankDraft()\n```"
        },
        {
          "name": "sendDraft",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L297",
          "visibility": "Public",
          "summary": "Send the draft with the given ID. This Action is handled by the {DraftStore},\nwhich finalizes the {DraftChangeSet} and allows {DraftStoreExtension}s to display\nwarnings and do post-processing. To change send behavior, you should consider using\none of these objects rather than listening for the {sendDraft} action.",
          "description": "Send the draft with the given ID. This Action is handled by the {DraftStore},\nwhich finalizes the {DraftChangeSet} and allows {DraftStoreExtension}s to display\nwarnings and do post-processing. To change send behavior, you should consider using\none of these objects rather than listening for the {sendDraft} action.\n\n*Scope: Window*\n\n```\nActions.sendDraft('123')\n```"
        },
        {
          "name": "destroyDraft",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L305",
          "visibility": "Public",
          "summary": "Destroys the draft with the given ID. This Action is handled by the {DraftStore},\nand does not display any confirmation UI.",
          "description": "Destroys the draft with the given ID. This Action is handled by the {DraftStore},\nand does not display any confirmation UI.\n\n*Scope: Window*"
        },
        {
          "name": "removeCurrentlyFocusedThread",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L312",
          "visibility": "Public",
          "summary": "Remove the currently focused {Thread}.",
          "description": "Remove the currently focused {Thread}.\n\n*Scope: Window*"
        },
        {
          "name": "removeSelection",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L319",
          "visibility": "Public",
          "summary": "Removes the Thread objects currently selected in the app's main thread list.",
          "description": "Removes the Thread objects currently selected in the app's main thread list.\n\n*Scope: Window*"
        },
        {
          "name": "searchQueryChanged",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L339",
          "visibility": "Public",
          "summary": "Updates the search query in the app's main search bar with the provided query text.",
          "description": "Updates the search query in the app's main search bar with the provided query text.\n\n*Scope: Window*\n\n```\nActions.searchQueryChanged(\"New Search Query\")\n```"
        },
        {
          "name": "searchQueryCommitted",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L351",
          "visibility": "Public",
          "summary": "Submits a search with the provided query text. Unlike `searchQueryChanged`, this\naction immediately performs a search.",
          "description": "Submits a search with the provided query text. Unlike `searchQueryChanged`, this\naction immediately performs a search.\n\n*Scope: Window*\n\n```\nActions.searchQueryCommitted(\"New Search Query\")\n```"
        },
        {
          "name": "RSVPEvent",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L360",
          "visibility": "Public",
          "summary": "Submits the user's response to an RSVP event.",
          "description": "Submits the user's response to an RSVP event.\n\n*Scope: Window*"
        },
        {
          "name": "postNotification",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L391",
          "visibility": "Public",
          "summary": "Fire to display an in-window notification to the user in the app's standard\nnotification interface.",
          "description": "Fire to display an in-window notification to the user in the app's standard\nnotification interface.\n\n*Scope: Global*\n\n```\n# A simple notification\nActions.postNotification({message: \"Removed Thread\", type: 'success'})\n\n# A sticky notification with actions\nNOTIF_ACTION_YES = 'YES'\nNOTIF_ACTION_NO = 'NO'\n\nActions.postNotification\n  type: 'info',\n  sticky: true\n  message: \"Thanks for trying out N1! Would you like to make it your default mail client?\",\n  icon: 'fa-inbox',\n  actions: [{\n    label: 'Yes'\n    id: NOTIF_ACTION_YES\n  },{\n    label: 'Not Now'\n    id: NOTIF_ACTION_NO\n  }]\n```"
        },
        {
          "name": "notificationActionTaken",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L407",
          "visibility": "Public",
          "summary": "Listen to this action to handle user interaction with notifications you\npublished via `postNotification`.",
          "description": "Listen to this action to handle user interaction with notifications you\npublished via `postNotification`.\n\n*Scope: Global*\n\n```\n@_unlisten = Actions.notificationActionTaken.listen(@_onActionTaken, @)\n\n_onActionTaken: ({notification, action}) ->\n  if action.id is NOTIF_ACTION_YES\n    # perform action\n```"
        },
        {
          "name": "removeFile",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L429",
          "visibility": "Public",
          "summary": "Remove a file from a draft.",
          "description": "Remove a file from a draft.\n\n*Scope: Window*\n\n```\nActions.removeFile\n  file: fileObject\n  messageClientId: draftClientId\n```"
        },
        {
          "name": "popSheet",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L448",
          "visibility": "Public",
          "summary": "Pop the current sheet off the Sheet stack maintained by the {WorkspaceStore}.\nThis action has no effect if the window is currently showing a root sheet.",
          "description": "Pop the current sheet off the Sheet stack maintained by the {WorkspaceStore}.\nThis action has no effect if the window is currently showing a root sheet.\n\n*Scope: Window*"
        },
        {
          "name": "pushSheet",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/actions.coffee#L466",
          "visibility": "Public",
          "summary": "Push a sheet of a specific type onto the Sheet stack maintained by the\n{WorkspaceStore}. Note that sheets have no state. To show a *specific* thread,\nyou should push a Thread sheet and call `setFocus` to select the thread.",
          "description": "Push a sheet of a specific type onto the Sheet stack maintained by the\n{WorkspaceStore}. Note that sheets have no state. To show a *specific* thread,\nyou should push a Thread sheet and call `setFocus` to select the thread.\n\n*Scope: Window*\n\n```\nWorkspaceStore.defineSheet 'Thread', {},\n    list: ['MessageList', 'MessageListSidebar']\n\n...\n\n@pushSheet(WorkspaceStore.Sheet.Thread)\n```"
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "In the Flux {Architecture.md}, almost every user action\nis translated into an Action object and fired globally. Stores in the app observe\nthese actions and perform business logic. This loose coupling means that your\npackages can observe actions and perform additional logic, or fire actions which\nthe rest of the app will handle.",
      "description": "In the Flux {Architecture.md}, almost every user action\nis translated into an Action object and fired globally. Stores in the app observe\nthese actions and perform business logic. This loose coupling means that your\npackages can observe actions and perform additional logic, or fire actions which\nthe rest of the app will handle.\n\nIn Reflux, each {Action} is an independent object that acts as an event emitter.\nYou can listen to an Action, or invoke it as a function to fire it.\n\n## Action Scopes\n\nN1 is a multi-window application. The `scope` of an Action dictates\nhow it propogates between windows.\n\n* **Global**: These actions can be listened to from any window and fired from any\n  window. The action is sent from the originating window to all other windows via\n  IPC, so they should be used with care. Firing this action from anywhere will\n  cause all listeners in all windows to fire.\n* **Main Window**: You can fire these actions in any window. They'll be sent\n  to the main window and triggered there.\n* **Window**: These actions only trigger listeners in the window they're fired in.\n\n## Firing Actions\n\n```coffee\nActions.postNotification({message: \"Removed Thread\", type: 'success'})\n\nActions.queueTask(new ChangeStarredTask(thread: @_thread, starred: true))\n```\n\n## Listening for Actions\n\nIf you're using Reflux to create your own Store, you can use the `listenTo`\nconvenience method to listen for an Action. If you're creating your own class\nthat is not a Store, you can still use the `listen` method provided by Reflux:\n\n```coffee\nsetup: ->\n  @unlisten = Actions.didPassivelyReceiveNewModels.listen(@onNewMailReceived, @)\n\nonNewMailReceived: (data) ->\n  console.log(\"You've got mail!\", data)\n\nteardown: ->\n  @unlisten()\n```\n\nSection: General"
    },
    "Atom": {
      "name": "Atom",
      "superClass": "Model",
      "filename": "src/atom.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L25",
      "sections": [
        {
          "name": "Properties",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Atom Details",
          "description": ""
        },
        {
          "name": "Managing The Atom Window",
          "description": ""
        },
        {
          "name": "Messaging the User",
          "description": ""
        },
        {
          "name": "Managing the Dev Tools",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidBeep",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L293",
          "visibility": "Extended",
          "summary": "Invoke the given callback whenever {::beep} is called.",
          "description": "Invoke the given callback whenever {::beep} is called.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called whenever {::beep} is called.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillThrowError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L309",
          "visibility": "Extended",
          "summary": "Invoke the given callback when there is an unhandled error, but\nbefore the devtools pop open",
          "description": "Invoke the given callback when there is an unhandled error, but\nbefore the devtools pop open",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "originalError",
                      "description": "{Object} the original error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "message",
                      "description": "{String} the original error object",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "url",
                      "description": "{String} Url to the file where the error originated.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "line",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    },
                    {
                      "name": "column",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    },
                    {
                      "name": "preventDefault",
                      "description": "{Function} call this to avoid popping up the dev tools.",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called whenever there is an unhandled error",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidThrowError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L323",
          "visibility": "Extended",
          "summary": "Invoke the given callback whenever there is an unhandled error.",
          "description": "Invoke the given callback whenever there is an unhandled error.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "originalError",
                      "description": "{Object} the original error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "message",
                      "description": "{String} the original error object",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "url",
                      "description": "{String} Url to the file where the error originated.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "line",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    },
                    {
                      "name": "column",
                      "description": "{Number}",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called whenever there is an unhandled error",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "trace",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L331",
          "visibility": "Extended",
          "summary": "Run the Chromium content-tracing module for five seconds, and save\nthe output to a file which is printed to the command-line output of the app.\nYou can take the file exported by this function and load it into Chrome's\ncontent trace visualizer (chrome://tracing). It's like Chromium Developer\nTools Profiler, but for all processes and threads. ",
          "description": "Run the Chromium content-tracing module for five seconds, and save\nthe output to a file which is printed to the command-line output of the app.\nYou can take the file exported by this function and load it into Chrome's\ncontent trace visualizer (chrome://tracing). It's like Chromium Developer\nTools Profiler, but for all processes and threads. "
        },
        {
          "name": "inDevMode",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L353",
          "visibility": "Public",
          "summary": "Is the current window in development mode? ",
          "description": "Is the current window in development mode? "
        },
        {
          "name": "inSafeMode",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L357",
          "visibility": "Public",
          "summary": "Is the current window in safe mode? ",
          "description": "Is the current window in safe mode? "
        },
        {
          "name": "inSpecMode",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L361",
          "visibility": "Public",
          "summary": "Is the current window running specs? ",
          "description": "Is the current window running specs? "
        },
        {
          "name": "getVersion",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L367",
          "visibility": "Public",
          "summary": "Get the version of the Atom application.",
          "description": "Get the version of the Atom application.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the version text {String}."
            }
          ]
        },
        {
          "name": "isReleasedVersion",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L371",
          "visibility": "Public",
          "summary": "Determine whether the current version is an official release. ",
          "description": "Determine whether the current version is an official release. "
        },
        {
          "name": "getWindowLoadTime",
          "sectionName": "Atom Details",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L387",
          "visibility": "Public",
          "summary": "Get the time taken to completely load the current window.",
          "description": "Get the time taken to completely load the current window.\n\nThis time include things like loading and activating packages, creating\nDOM elements for the editor, and reading the config.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns the {Number} of milliseconds taken to load the window or null\nif the window hasn't finished loading yet."
            }
          ]
        },
        {
          "name": "close",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L401",
          "visibility": "Essential",
          "summary": "Close the current window. ",
          "description": "Close the current window. "
        },
        {
          "name": "getSize",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L410",
          "visibility": "Essential",
          "summary": "Get the size of current window.",
          "description": "Get the size of current window.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} in the format `{width: 1000, height: 700}`"
            }
          ]
        },
        {
          "name": "setSize",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L418",
          "visibility": "Essential",
          "summary": "Set the size of current window.",
          "description": "Set the size of current window.",
          "arguments": [
            {
              "name": "width",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "height",
              "description": "The {Number} of pixels. ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "setSizeAnimated",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L426",
          "visibility": "Essential",
          "summary": "Transition and set the size of the current window.",
          "description": "Transition and set the size of the current window.",
          "arguments": [
            {
              "name": "width",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "height",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "duration",
              "description": "The {Number} of pixels. ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getPosition",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L457",
          "visibility": "Essential",
          "summary": "Get the position of current window.",
          "description": "Get the position of current window.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} in the format `{x: 10, y: 20}`"
            }
          ]
        },
        {
          "name": "setPosition",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L465",
          "visibility": "Essential",
          "summary": "Set the position of current window.",
          "description": "Set the position of current window.",
          "arguments": [
            {
              "name": "x",
              "description": "The {Number} of pixels.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "y",
              "description": "The {Number} of pixels. ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "center",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L473",
          "visibility": "Extended",
          "summary": "Move current window to the center of the screen. ",
          "description": "Move current window to the center of the screen. "
        },
        {
          "name": "focus",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L477",
          "visibility": "Extended",
          "summary": "Focus the current window. ",
          "description": "Focus the current window. "
        },
        {
          "name": "show",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L482",
          "visibility": "Extended",
          "summary": "Show the current window. ",
          "description": "Show the current window. "
        },
        {
          "name": "hide",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L489",
          "visibility": "Extended",
          "summary": "Hide the current window. ",
          "description": "Hide the current window. "
        },
        {
          "name": "reload",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L493",
          "visibility": "Extended",
          "summary": "Reload the current window. ",
          "description": "Reload the current window. "
        },
        {
          "name": "getWindowProps",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L511",
          "visibility": "Public",
          "summary": "The windowProps passed when creating the window via `newWindow`.",
          "description": "The windowProps passed when creating the window via `newWindow`."
        },
        {
          "name": "onWindowPropsReceived",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L521",
          "visibility": "Public",
          "summary": "If your package declares hot-loaded window types, `onWindowPropsReceived`\nfires when your hot-loaded window is about to be shown so you can update\ncomponents to reflect the new window props.",
          "description": "If your package declares hot-loaded window types, `onWindowPropsReceived`\nfires when your hot-loaded window is about to be shown so you can update\ncomponents to reflect the new window props.\n\n* callback: A function to call when window props are received, just before\n  the hot window is shown. The first parameter is the new windowProps."
        },
        {
          "name": "isMaximixed",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L525",
          "visibility": "Extended",
          "summary": "Is the current window maximized? ",
          "description": "Is the current window maximized? "
        },
        {
          "name": "isFullScreen",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L535",
          "visibility": "Extended",
          "summary": "Is the current window in full screen mode? ",
          "description": "Is the current window in full screen mode? "
        },
        {
          "name": "setFullScreen",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L539",
          "visibility": "Extended",
          "summary": "Set the full screen state of the current window. ",
          "description": "Set the full screen state of the current window. "
        },
        {
          "name": "toggleFullScreen",
          "sectionName": "Managing The Atom Window",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L544",
          "visibility": "Extended",
          "summary": "Toggle the full screen state of the current window. ",
          "description": "Toggle the full screen state of the current window. "
        },
        {
          "name": "beep",
          "sectionName": "Messaging the User",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L698",
          "visibility": "Essential",
          "summary": "Visually and audibly trigger a beep. ",
          "description": "Visually and audibly trigger a beep. "
        },
        {
          "name": "confirm",
          "sectionName": "Messaging the User",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L730",
          "visibility": "Essential",
          "summary": "A flexible way to open a dialog akin to an alert dialog.",
          "description": "A flexible way to open a dialog akin to an alert dialog.",
          "arguments": [
            {
              "children": [
                {
                  "name": "message",
                  "description": "The {String} message to display.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "detailedMessage",
                  "description": "The {String} detailed message to display.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "buttons",
                  "description": "Either an array of strings or an object where keys are button names and the values are callbacks to invoke when clicked.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "coffee",
              "code": "atom.confirm\n  message: 'How you feeling?'\n  detailedMessage: 'Be honest.'\n  buttons:\n    Good: -> window.alert('good to hear')\n    Bad: -> window.alert('bummer')",
              "raw": "```coffee\natom.confirm\n  message: 'How you feeling?'\n  detailedMessage: 'Be honest.'\n  buttons:\n    Good: -> window.alert('good to hear')\n    Bad: -> window.alert('bummer')\n```"
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns the chosen button index {Number} if the buttons option was an array."
            }
          ]
        },
        {
          "name": "openDevTools",
          "sectionName": "Managing the Dev Tools",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L755",
          "visibility": "Extended",
          "summary": "Open the dev tools for the current window. ",
          "description": "Open the dev tools for the current window. "
        },
        {
          "name": "toggleDevTools",
          "sectionName": "Managing the Dev Tools",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L759",
          "visibility": "Extended",
          "summary": "Toggle the visibility of the dev tools for the current window. ",
          "description": "Toggle the visibility of the dev tools for the current window. "
        },
        {
          "name": "executeJavaScriptInDevTools",
          "sectionName": "Managing the Dev Tools",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L763",
          "visibility": "Extended",
          "summary": "Execute code in dev tools. ",
          "description": "Execute code in dev tools. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "commands",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L99",
          "visibility": "Public",
          "summary": "A {CommandRegistry} instance ",
          "description": "A {CommandRegistry} instance "
        },
        {
          "name": "config",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L102",
          "visibility": "Public",
          "summary": "A {Config} instance ",
          "description": "A {Config} instance "
        },
        {
          "name": "clipboard",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L105",
          "visibility": "Public",
          "summary": "A {Clipboard} instance ",
          "description": "A {Clipboard} instance "
        },
        {
          "name": "menu",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L108",
          "visibility": "Public",
          "summary": "A {MenuManager} instance ",
          "description": "A {MenuManager} instance "
        },
        {
          "name": "keymaps",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L111",
          "visibility": "Public",
          "summary": "A {KeymapManager} instance ",
          "description": "A {KeymapManager} instance "
        },
        {
          "name": "packages",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L114",
          "visibility": "Public",
          "summary": "A {PackageManager} instance ",
          "description": "A {PackageManager} instance "
        },
        {
          "name": "themes",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L117",
          "visibility": "Public",
          "summary": "A {ThemeManager} instance ",
          "description": "A {ThemeManager} instance "
        },
        {
          "name": "styles",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/atom.coffee#L120",
          "visibility": "Public",
          "summary": "A {StyleManager} instance ",
          "description": "A {StyleManager} instance "
        }
      ],
      "visibility": "Essential",
      "summary": "Atom global for dealing with packages, themes, menus, and the window.",
      "description": "Atom global for dealing with packages, themes, menus, and the window.\n\nThe singleton of this class is always available as the `atom` global. "
    },
    "Attribute": {
      "name": "Attribute",
      "filename": "src/flux/attributes/attribute.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute.coffee#L13",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "equal",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute.coffee#L21",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects `=` to the provided value."
            }
          ]
        },
        {
          "name": "in",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute.coffee#L27",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects `=` to the provided value."
            }
          ]
        },
        {
          "name": "not",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute.coffee#L34",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects `!=` to the provided value."
            }
          ]
        },
        {
          "name": "descending",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute.coffee#L40",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "SortOrder",
              "description": "Returns a descending {SortOrder} for this attribute."
            }
          ]
        },
        {
          "name": "ascending",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute.coffee#L44",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "SortOrder",
              "description": "Returns an ascending {SortOrder} for this attribute."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Attribute class represents a single model attribute, like 'account_id'.\nSubclasses of {Attribute} like {AttributeDateTime} know how to covert between\nthe JSON representation of that type and the javascript representation.\nThe Attribute class also exposes convenience methods for generating {Matcher} objects.",
      "description": "The Attribute class represents a single model attribute, like 'account_id'.\nSubclasses of {Attribute} like {AttributeDateTime} know how to covert between\nthe JSON representation of that type and the javascript representation.\nThe Attribute class also exposes convenience methods for generating {Matcher} objects.\n\nSection: Database"
    },
    "AttributeBoolean": {
      "name": "AttributeBoolean",
      "superClass": "Attribute",
      "filename": "src/flux/attributes/attribute-boolean.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-boolean.coffee#L13",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The value of this attribute is always a boolean. Null values are coerced to false.",
      "description": "The value of this attribute is always a boolean. Null values are coerced to false.\n\nString attributes can be queries using `equal` and `not`. Matching on\n`greaterThan` and `lessThan` is not supported.\n\nSection: Database"
    },
    "AttributeCollection": {
      "name": "AttributeCollection",
      "superClass": "Attribute",
      "filename": "src/flux/attributes/attribute-collection.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-collection.coffee#L34",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "contains",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-collection.coffee#L68",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects containing the provided value."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Collection attributes provide basic support for one-to-many relationships.\nFor example, Threads in N1 have a collection of Labels or Folders.",
      "description": "Collection attributes provide basic support for one-to-many relationships.\nFor example, Threads in N1 have a collection of Labels or Folders.\n\nWhen Collection attributes are marked as `queryable`, the DatabaseStore\nautomatically creates a join table and maintains it as you create, save,\nand delete models. When you call `persistModel`, entries are added to the\njoin table associating the ID of the model with the IDs of models in the collection.\n\nCollection attributes have an additional clause builder, `contains`:\n\n```coffee\nDatabaseStore.findAll(Thread).where([Thread.attributes.labels.contains('inbox')])\n```\n\nThis is equivalent to writing the following SQL:\n\n```sql\nSELECT `Thread`.`data` FROM `Thread`\nINNER JOIN `Thread-Label` AS `M1` ON `M1`.`id` = `Thread`.`id`\nWHERE `M1`.`value` = 'inbox'\nORDER BY `Thread`.`last_message_received_timestamp` DESC\n```\n\nThe value of this attribute is always an array of other model objects.\n\nSection: Database"
    },
    "AttributeDateTime": {
      "name": "AttributeDateTime",
      "superClass": "Attribute",
      "filename": "src/flux/attributes/attribute-datetime.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-datetime.coffee#L10",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "greaterThan",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-datetime.coffee#L24",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects greater than the provided value."
            }
          ]
        },
        {
          "name": "lessThan",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-datetime.coffee#L30",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects less than the provided value."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The value of this attribute is always a Javascript `Date`, or `null`.",
      "description": "The value of this attribute is always a Javascript `Date`, or `null`.\n\nSection: Database"
    },
    "AttributeJoinedData": {
      "name": "AttributeJoinedData",
      "superClass": "Attribute",
      "filename": "src/flux/attributes/attribute-joined-data.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-joined-data.coffee#L35",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Joined Data attributes allow you to store certain attributes of an\nobject in a separate table in the database. We use this attribute\ntype for Message bodies. Storing message bodies, which can be very\nlarge, in a separate table allows us to make queries on message\nmetadata extremely fast, and inflate Message objects without their\nbodies to build the thread list.",
      "description": "Joined Data attributes allow you to store certain attributes of an\nobject in a separate table in the database. We use this attribute\ntype for Message bodies. Storing message bodies, which can be very\nlarge, in a separate table allows us to make queries on message\nmetadata extremely fast, and inflate Message objects without their\nbodies to build the thread list.\n\nWhen building a query on a model with a JoinedData attribute, you need\nto call `include` to explicitly load the joined data attribute.\nThe query builder will automatically perform a `LEFT OUTER JOIN` with\nthe secondary table to retrieve the attribute:\n\n```coffee\nDatabaseStore.find(Message, '123').then (message) ->\n  # message.body is undefined\n\nDatabaseStore.find(Message, '123').include(Message.attributes.body).then (message) ->\n  # message.body is defined\n```\n\nWhen you call `persistModel`, JoinedData attributes are automatically\nwritten to the secondary table.\n\nJoinedData attributes cannot be `queryable`.\n\nSection: Database"
    },
    "AttributeNumber": {
      "name": "AttributeNumber",
      "superClass": "Attribute",
      "filename": "src/flux/attributes/attribute-number.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-number.coffee#L10",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "greaterThan",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-number.coffee#L16",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects greater than the provided value."
            }
          ]
        },
        {
          "name": "lessThan",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-number.coffee#L22",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects less than the provided value."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The value of this attribute is always a number, or null.",
      "description": "The value of this attribute is always a number, or null.\n\nSection: Database"
    },
    "AttributeObject": {
      "name": "AttributeObject",
      "superClass": "Attribute",
      "filename": "src/flux/attributes/attribute-object.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-object.coffee#L8",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "An object that can be cast to `itemClass`\nSection: Database",
      "description": "An object that can be cast to `itemClass`\nSection: Database"
    },
    "AttributeServerId": {
      "name": "AttributeServerId",
      "superClass": "AttributeString",
      "filename": "src/flux/attributes/attribute-serverid.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-serverid.coffee#L12",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The value of this attribute is always a string or `null`.",
      "description": "The value of this attribute is always a string or `null`.\n\nString attributes can be queries using `equal`, `not`, and `startsWith`. Matching on\n`greaterThan` and `lessThan` is not supported.\n\nSection: Database"
    },
    "AttributeString": {
      "name": "AttributeString",
      "superClass": "Attribute",
      "filename": "src/flux/attributes/attribute-string.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-string.coffee#L12",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "startsWith",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/attribute-string.coffee#L17",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Matcher",
              "description": "Returns a {Matcher} for objects starting with the provided value."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The value of this attribute is always a string or `null`.",
      "description": "The value of this attribute is always a string or `null`.\n\nString attributes can be queries using `equal`, `not`, and `startsWith`. Matching on\n`greaterThan` and `lessThan` is not supported.\n\nSection: Database"
    },
    "BufferedNodeProcess": {
      "name": "BufferedNodeProcess",
      "superClass": "BufferedProcess",
      "filename": "src/buffered-node-process.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/buffered-node-process.coffee#L15",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/buffered-node-process.coffee#L38",
          "visibility": "Public",
          "summary": "Runs the given Node script by spawning a new child process.",
          "description": "Runs the given Node script by spawning a new child process.",
          "arguments": [
            {
              "children": [
                {
                  "name": "command",
                  "description": "The {String} path to the JavaScript script to execute.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "args",
                  "description": "The {Array} of arguments to pass to the script (optional).",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "options",
                  "description": "The options {Object} to pass to Node's `ChildProcess.spawn`\n```\n      method (optional).\n```",
                  "type": "Object",
                  "isOptional": false
                },
                {
                  "name": "stdout",
                  "description": "The callback {Function} that receives a single argument which\n```\n     contains the standard output from the command. The callback is\n     called as data is received but it's buffered to ensure only\n     complete lines are passed until the source stream closes. After\n     the source stream has closed all remaining data is sent in a\n     final call (optional).\n```",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "stderr",
                  "description": "The callback {Function} that receives a single argument which\n```\n     contains the standard error output from the command. The\n     callback is called as data is received but it's buffered to\n     ensure only complete lines are passed until the source stream\n     closes. After the source stream has closed all remaining data\n     is sent in a final call (optional).\n```",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "exit",
                  "description": "The callback {Function} which receives a single argument\n```\n   containing the exit status (optional).\n```",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Like {BufferedProcess}, but accepts a Node script as the command\nto run.",
      "description": "Like {BufferedProcess}, but accepts a Node script as the command\nto run.\n\nThis is necessary on Windows since it doesn't support shebang `#!` lines.",
      "examples": [
        {
          "description": "",
          "lang": "coffee",
          "code": "  {BufferedNodeProcess} = require 'atom'",
          "raw": "```coffee\n  {BufferedNodeProcess} = require 'atom'\n```"
        }
      ]
    },
    "BufferedProcess": {
      "name": "BufferedProcess",
      "filename": "src/buffered-process.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/buffered-process.coffee#L21",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Helper Methods",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/buffered-process.coffee#L48",
          "visibility": "Public",
          "summary": "Runs the given command by spawning a new child process.",
          "description": "Runs the given command by spawning a new child process.",
          "arguments": [
            {
              "children": [
                {
                  "name": "command",
                  "description": "The {String} command to execute.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "args",
                  "description": "The {Array} of arguments to pass to the command (optional).",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "options",
                  "description": "{Object} (optional) The options {Object} to pass to Node's `ChildProcess.spawn` method.",
                  "type": "Object",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "data",
                      "description": "{String}",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "stdout",
                  "description": "{Function} (optional) The callback that receives a single argument which contains the standard output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "data",
                      "description": "{String}",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "stderr",
                  "description": "{Function} (optional) The callback that receives a single argument which contains the standard error output from the command. The callback is called as data is received but it's buffered to ensure only complete lines are passed until the source stream closes. After the source stream has closed all remaining data is sent in a final call.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "code",
                      "description": "{Number} ",
                      "type": "Number",
                      "isOptional": false
                    }
                  ],
                  "name": "exit",
                  "description": "{Function} (optional) The callback which receives a single argument containing the exit status.",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "An {Object} with the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onWillThrowError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/buffered-process.coffee#L96",
          "visibility": "Public",
          "summary": "Will call your callback when an error will be raised by the process.\nUsually this is due to the command not being available or not on the PATH.\nYou can call `handle()` on the object passed to your callback to indicate\nthat you have handled this error.",
          "description": "Will call your callback when an error will be raised by the process.\nUsually this is due to the command not being available or not on the PATH.\nYou can call `handle()` on the object passed to your callback to indicate\nthat you have handled this error.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "error",
                      "description": "{Object} the error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "handle",
                      "description": "{Function} call this to indicate you have handled the error. The error will not be thrown if this function is called.",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "errorObject",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} callback",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable}"
            }
          ]
        },
        {
          "name": "kill",
          "sectionName": "Helper Methods",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/buffered-process.coffee#L183",
          "visibility": "Public",
          "summary": "Terminate the process. ",
          "description": "Terminate the process. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A wrapper which provides standard error/output line buffering for\nNode's ChildProcess.",
      "description": "A wrapper which provides standard error/output line buffering for\nNode's ChildProcess.",
      "examples": [
        {
          "description": "",
          "lang": "coffee",
          "code": "{BufferedProcess} = require 'atom'\n\ncommand = 'ps'\nargs = ['-ef']\nstdout = (output) -> console.log(output)\nexit = (code) -> console.log(\"ps -ef exited with #{code}\")\nprocess = new BufferedProcess({command, args, stdout, exit})",
          "raw": "```coffee\n{BufferedProcess} = require 'atom'\n\ncommand = 'ps'\nargs = ['-ef']\nstdout = (output) -> console.log(output)\nexit = (code) -> console.log(\"ps -ef exited with #{code}\")\nprocess = new BufferedProcess({command, args, stdout, exit})\n```"
        }
      ]
    },
    "Calendar": {
      "name": "Calendar",
      "superClass": "Model",
      "filename": "src/flux/models/calendar.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/calendar.coffee#L20",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Calendar model represents a Calendar object served by the Nylas Platform API.\nFor more information about Calendar on the Nylas Platform, read the\n[Calendar API Documentation](https://nylas.com/docs/api#calendar)",
      "description": "The Calendar model represents a Calendar object served by the Nylas Platform API.\nFor more information about Calendar on the Nylas Platform, read the\n[Calendar API Documentation](https://nylas.com/docs/api#calendar)\n\n## Attributes\n\n`name`: {AttributeString} The name of the calendar.\n\n`description`: {AttributeString} The description of the calendar.\n\nThis class also inherits attributes from {Model}\n\nSection: Models"
    },
    "ChangeFolderTask": {
      "name": "ChangeFolderTask",
      "superClass": "ChangeMailTask",
      "filename": "src/flux/tasks/change-folder-task.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/tasks/change-folder-task.coffee#L21",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Create a new task to apply labels to a message or thread.",
      "description": "Create a new task to apply labels to a message or thread.\n\nTakes an options object of the form:\n\n* folder: The {Folder} or {Folder} IDs to move to\n* threads: An array of {Thread}s or {Thread} IDs\n* threads: An array of {Message}s or {Message} IDs\n* undoData: Since changing the folder is a destructive action,\n  undo tasks need to store the configuration of what folders messages\n  were in. When creating an undo task, we fill this parameter with\n  that configuration"
    },
    "ChangeLabelsTask": {
      "name": "ChangeLabelsTask",
      "superClass": "ChangeMailTask",
      "filename": "src/flux/tasks/change-labels-task.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/tasks/change-labels-task.coffee#L17",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Create a new task to apply labels to a message or thread.",
      "description": "Create a new task to apply labels to a message or thread.\n\nTakes an options object of the form:\n\n* labelsToAdd: An {Array} of {Label}s or {Label} ids to add\n* labelsToRemove: An {Array} of {Label}s or {Label} ids to remove\n* threads: An {Array} of {Thread}s or {Thread} ids\n* messages: An {Array} of {Message}s or {Message} ids "
    },
    "Clipboard": {
      "name": "Clipboard",
      "filename": "src/clipboard.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/clipboard.coffee#L18",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "write",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/clipboard.coffee#L37",
          "visibility": "Public",
          "summary": "Write the given text to the clipboard.",
          "description": "Write the given text to the clipboard.\n\nThe metadata associated with the text is available by calling\n{::readWithMetadata}.",
          "arguments": [
            {
              "name": "text",
              "description": "The {String} to store.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "metadata",
              "description": "The additional info to associate with the text. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "read",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/clipboard.coffee#L45",
          "visibility": "Public",
          "summary": "Read the text from the clipboard.",
          "description": "Read the text from the clipboard.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "readWithMetadata",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/clipboard.coffee#L54",
          "visibility": "Public",
          "summary": "Read the text from the clipboard and return both the text and the\nassociated metadata.",
          "description": "Read the text from the clipboard and return both the text and the\nassociated metadata.",
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} with the following keys:\n\n* `text` The {String} clipboard text.\n* `metadata` The metadata stored by an earlier call to {::write}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Represents the clipboard used for copying and pasting in Atom.",
      "description": "Represents the clipboard used for copying and pasting in Atom.\n\nAn instance of this class is always available as the `atom.clipboard` global.\n\nSection: Atom",
      "examples": [
        {
          "description": "",
          "lang": "coffee",
          "code": "atom.clipboard.write('hello')\n\nconsole.log(atom.clipboard.read()) # 'hello'",
          "raw": "```coffee\natom.clipboard.write('hello')\n\nconsole.log(atom.clipboard.read()) # 'hello'\n```"
        }
      ]
    },
    "Color": {
      "name": "Color",
      "filename": "src/color.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/color.coffee#L10",
      "sections": [],
      "classMethods": [
        {
          "name": "parse",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/color.coffee#L18",
          "visibility": "Essential",
          "summary": "Parse a {String} or {Object} into a {Color}.",
          "description": "Parse a {String} or {Object} into a {Color}.",
          "arguments": [
            {
              "name": "value",
              "description": "A {String} such as `'white'`, `#ff00ff`, or `'rgba(255, 15, 60, .75)'` or an {Object} with `red`, `green`, `blue`, and `alpha` properties.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Color",
              "description": "Returns a {Color} or `null` if it cannot be parsed."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "toHexString",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/color.coffee#L60",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} in the form `'#abcdef'`."
            }
          ]
        },
        {
          "name": "toRGBAString",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/color.coffee#L64",
          "visibility": "Essential",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String} in the form `'rgba(25, 50, 75, .9)'`."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "A simple color class returned from {Config::get} when the value\nat the key path is of type 'color'.",
      "description": "A simple color class returned from {Config::get} when the value\nat the key path is of type 'color'.\n\nSection: Atom"
    },
    "CommandRegistry": {
      "name": "CommandRegistry",
      "filename": "src/command-registry.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/command-registry.coffee#L44",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "add",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/command-registry.coffee#L83",
          "visibility": "Public",
          "summary": "Add one or more command listeners associated with a selector.",
          "description": "Add one or more command listeners associated with a selector.",
          "titledArguments": [
            {
              "title": "Registering One Command",
              "description": "",
              "arguments": [
                {
                  "name": "target",
                  "description": "A {String} containing a CSS selector or a DOM element. If you pass a selector, the command will be globally associated with all matching elements. The `,` combinator is not currently supported. If you pass a DOM element, the command will be associated with just that element.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "commandName",
                  "description": "A {String} containing the name of a command you want to handle such as `user:insert-date`.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "children": [
                    {
                      "name": "event",
                      "description": "A standard DOM event instance. Call `stopPropagation` or `stopImmediatePropagation` to terminate bubbling early.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "callback",
                  "description": "A {Function} to call when the given command is invoked on an element matching the selector. It will be called with `this` referencing the matching DOM node.",
                  "type": "Function",
                  "isOptional": false
                }
              ]
            },
            {
              "title": "Registering Multiple Commands",
              "description": "",
              "arguments": [
                {
                  "name": "target",
                  "description": "A {String} containing a CSS selector or a DOM element. If you pass a selector, the commands will be globally associated with all matching elements. The `,` combinator is not currently supported. If you pass a DOM element, the command will be associated with just that element.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "commands",
                  "description": "An {Object} mapping command names like `user:insert-date` to listener {Function}s.",
                  "type": "Object",
                  "isOptional": false
                }
              ]
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to remove the\nadded command handler(s)."
            }
          ]
        },
        {
          "name": "findCommands",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/command-registry.coffee#L138",
          "visibility": "Public",
          "summary": "Find all registered commands matching a query.",
          "description": "Find all registered commands matching a query.",
          "arguments": [
            {
              "children": [
                {
                  "name": "target",
                  "description": "A DOM node that is the hypothetical target of a given command.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "An {Object} containing one or more of the following keys:",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Object}s containing the following keys:\n\n* `name` The name of the command. For example, `user:insert-date`.\n* `displayName` The display name of the command. For example,\n  `User: Insert Date`.\n* `jQuery` Present if the command was registered with the legacy\n  `$::command` method."
            }
          ]
        },
        {
          "name": "dispatch",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/command-registry.coffee#L171",
          "visibility": "Public",
          "summary": "Simulate the dispatch of a command on a DOM node.",
          "description": "Simulate the dispatch of a command on a DOM node.\n\nThis can be useful for testing when you want to simulate the invocation of a\ncommand on a detached DOM node. Otherwise, the DOM node in question needs to\nbe attached to the document so the event bubbles up to the root node to be\nprocessed.",
          "arguments": [
            {
              "name": "target",
              "description": "The DOM node at which to start bubbling the command event.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "commandName",
              "description": "{String} indicating the name of the command to dispatch. ",
              "type": "String",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Associates listener functions with commands in a\ncontext-sensitive way using CSS selectors. You can access a global instance of\nthis class via `atom.commands`, and commands registered there will be\npresented in the command palette.",
      "description": "Associates listener functions with commands in a\ncontext-sensitive way using CSS selectors. You can access a global instance of\nthis class via `atom.commands`, and commands registered there will be\npresented in the command palette.\n\nThe global command registry facilitates a style of event handling known as\n*event delegation* that was popularized by jQuery. Atom commands are expressed\nas custom DOM events that can be invoked on the currently focused element via\na key binding or manually via the command palette. Rather than binding\nlisteners for command events directly to DOM nodes, you instead register\ncommand event listeners globally on `atom.commands` and constrain them to\nspecific kinds of elements with CSS selectors.\n\nAs the event bubbles upward through the DOM, all registered event listeners\nwith matching selectors are invoked in order of specificity. In the event of a\nspecificity tie, the most recently registered listener is invoked first. This\nmirrors the \"cascade\" semantics of CSS. Event listeners are invoked in the\ncontext of the current DOM node, meaning `this` always points at\n`event.currentTarget`. As is normally the case with DOM events,\n`stopPropagation` and `stopImmediatePropagation` can be used to terminate the\nbubbling process and prevent invocation of additional listeners.\n\nSection: Atom\n\n## Example\n\nHere is a command that inserts the current date in an editor:\n\n```coffee\natom.commands.add 'atom-text-editor',\n  'user:insert-date': (event) ->\n    editor = @getModel()\n    editor.insertText(new Date().toLocaleString())\n```"
    },
    "ComponentRegistry": {
      "name": "ComponentRegistry",
      "filename": "src/component-registry.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/component-registry.coffee#L15",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "register",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/component-registry.coffee#L50",
          "visibility": "Public",
          "summary": "Register a new component with the Component Registry.\nTypically, packages call this method from their main `activate` method\nto extend the Nylas user interface, and call the corresponding `unregister`\nmethod in `deactivate`.",
          "description": "Register a new component with the Component Registry.\nTypically, packages call this method from their main `activate` method\nto extend the Nylas user interface, and call the corresponding `unregister`\nmethod in `deactivate`.\n\nThis method is chainable.",
          "arguments": [
            {
              "name": "component",
              "description": "{Object} A React Component with a `displayName`",
              "type": "Object",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "role",
                  "description": "{String} If you want to display your component in a location  desigated by a role, pass the role identifier.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "modes",
                  "description": "{Array} If your component should only be displayed  in particular Workspace Modes, pass an array of supported modes.  ('list', 'split', etc.)",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "location",
                  "description": "{Object} If your component should be displayed in a  column or toolbar, pass the fully qualified location object, such as:  `WorkspaceStore.Location.ThreadList`",
                  "type": "Object",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}: Note that for advanced use cases, you can also pass (`modes`, `roles`, `locations`) with arrays instead of single values.",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "findComponentByName",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/component-registry.coffee#L87",
          "visibility": "Public",
          "summary": "Retrieve the registry entry for a given name.",
          "description": "Retrieve the registry entry for a given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} name of the registered component to retrieve.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "React.Component",
              "description": "Returns a {React.Component}"
            }
          ]
        },
        {
          "name": "findComponentsMatching",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/component-registry.coffee#L120",
          "visibility": "Public",
          "summary": "Retrieve all of the registry entries matching a given descriptor.",
          "description": "Retrieve all of the registry entries matching a given descriptor.\n\n```coffee\n  ComponentRegistry.findComponentsMatching({\n    role: 'Composer:ActionButton'\n  })\n\n  ComponentRegistry.findComponentsMatching({\n    location: WorkspaceStore.Location.RootSidebar.Toolbar\n  })\n```",
          "arguments": [
            {
              "children": [
                {
                  "name": "mode",
                  "description": "{String} Components that specifically list modes  will only be returned if they include this mode.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "role",
                  "description": "{String} Only return components that have registered  for this role.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "location",
                  "description": "{Object} Only return components that have registered  for this location.",
                  "type": "Object",
                  "isOptional": true
                }
              ],
              "name": "descriptor",
              "description": "An {Object} that specifies set of components using the available keys below. Note that for advanced use cases, you can also pass (`modes`, `roles`, `locations`) with arrays instead of single values.",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {React.Component} objects"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The ComponentRegistry maintains an index of React components registered\nby Nylas packages. Components can use {InjectedComponent} and {InjectedComponentSet}\nto dynamically render components registered with the ComponentRegistry.",
      "description": "The ComponentRegistry maintains an index of React components registered\nby Nylas packages. Components can use {InjectedComponent} and {InjectedComponentSet}\nto dynamically render components registered with the ComponentRegistry.\n\nSection: Stores"
    },
    "Config": {
      "name": "Config",
      "filename": "src/config.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L298",
      "sections": [
        {
          "name": "Config Subscription",
          "description": ""
        },
        {
          "name": "Managing Settings",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "observe",
          "sectionName": "Config Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L384",
          "visibility": "Essential",
          "summary": "Add a listener for changes to a given key path. This is different\nthan {::onDidChange} in that it will immediately call your callback with the\ncurrent value of the config entry.",
          "description": "Add a listener for changes to a given key path. This is different\nthan {::onDidChange} in that it will immediately call your callback with the\ncurrent value of the config entry.\n\n### Examples\n\nYou might want to be notified when the themes change. We'll watch\n`core.themes` for changes\n\n```coffee\natom.config.observe 'core.themes', (value) ->\n  # do stuff with value\n```",
          "arguments": [
            {
              "name": "keyPath",
              "description": "{String} name of the key to observe",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "scopeDescriptor",
                  "description": "{ScopeDescriptor} describing a path from the root of the syntax tree to a token. Get one by calling {editor.getLastCursor().getScopeDescriptor()}. See {::get} for examples. See [the scopes docs](https://atom.io/docs/latest/advanced/scopes-and-scope-descriptors) for more information.",
                  "type": "ScopeDescriptor",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "value",
                  "description": "the new value of the key",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to call when the value of the key changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} with the following keys on which you can call\n`.dispose()` to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Config Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L430",
          "visibility": "Essential",
          "summary": "Add a listener for changes to a given key path. If `keyPath` is\nnot specified, your callback will be called on changes to any key.",
          "description": "Add a listener for changes to a given key path. If `keyPath` is\nnot specified, your callback will be called on changes to any key.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "{String} name of the key to observe. Must be specified if `scopeDescriptor` is specified.",
              "type": "String",
              "isOptional": true
            },
            {
              "children": [
                {
                  "name": "scopeDescriptor",
                  "description": "{ScopeDescriptor} describing a path from the root of the syntax tree to a token. Get one by calling {editor.getLastCursor().getScopeDescriptor()}. See {::get} for examples. See [the scopes docs](https://atom.io/docs/latest/advanced/scopes-and-scope-descriptors) for more information.",
                  "type": "ScopeDescriptor",
                  "isOptional": true
                }
              ],
              "name": "optional",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            },
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "newValue",
                      "description": "the new value of the key",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "oldValue",
                      "description": "the prior value of the key.",
                      "type": null,
                      "isOptional": false
                    },
                    {
                      "name": "keyPath",
                      "description": "the keyPath of the changed key",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to call when the value of the key changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} with the following keys on which you can call\n`.dispose()` to unsubscribe."
            }
          ]
        },
        {
          "name": "get",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L509",
          "visibility": "Essential",
          "summary": "Retrieves the setting for the given key.",
          "description": "Retrieves the setting for the given key.\n\n### Examples\n\nYou might want to know what themes are enabled, so check `core.themes`\n\n```coffee\natom.config.get('core.themes')\n```\n\nWith scope descriptors you can get settings within a specific editor\nscope. For example, you might want to know `editor.tabLength` for ruby\nfiles.\n\n```coffee\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\n```\n\nThis setting in ruby files might be different than the global tabLength setting\n\n```coffee\natom.config.get('editor.tabLength') # => 4\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\n```\n\nYou can get the language scope descriptor via\n{TextEditor::getRootScopeDescriptor}. This will get the setting specifically\nfor the editor's language.\n\n```coffee\natom.config.get('editor.tabLength', scope: @editor.getRootScopeDescriptor()) # => 2\n```\n\nAdditionally, you can get the setting at the specific cursor position.\n\n```coffee\nscopeDescriptor = @editor.getLastCursor().getScopeDescriptor()\natom.config.get('editor.tabLength', scope: scopeDescriptor) # => 2\n```",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key to retrieve.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "sources",
                  "description": "{Array} of {String} source names. If provided, only values that were associated with these sources during {::set} will be used.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "excludeSources",
                  "description": "{Array} of {String} source names. If provided, values that  were associated with these sources during {::set} will not be used.",
                  "type": "Array",
                  "isOptional": true
                },
                {
                  "name": "scope",
                  "description": "{ScopeDescriptor} describing a path from the root of the syntax tree to a token. Get one by calling {editor.getLastCursor().getScopeDescriptor()} See [the scopes docs](https://atom.io/docs/latest/advanced/scopes-and-scope-descriptors) for more information.",
                  "type": "ScopeDescriptor",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns the value from Atom's default settings, the user's configuration\nfile in the type specified by the configuration schema."
            }
          ]
        },
        {
          "name": "getAll",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L538",
          "visibility": "Extended",
          "summary": "Get all of the values for the given key-path, along with their\nassociated scope selector.",
          "description": "Get all of the values for the given key-path, along with their\nassociated scope selector.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key to retrieve",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "{Object} see the `options` argument to {::get}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Object}s with the following keys:\n\n* `scopeDescriptor` The {ScopeDescriptor} with which the value is associated\n* `value` The value for the key-path"
            }
          ]
        },
        {
          "name": "set",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L593",
          "visibility": "Essential",
          "summary": "Sets the value for a configuration setting.",
          "description": "Sets the value for a configuration setting.\n\nThis value is stored in Atom's internal configuration file.\n\n### Examples\n\nYou might want to change the themes programmatically:\n\n```coffee\natom.config.set('core.themes', ['ui-light', 'atom-light-syntax'])\n```\n\nYou can also set scoped settings. For example, you might want change the\n`editor.tabLength` only for ruby files.\n\n```coffee\natom.config.get('editor.tabLength') # => 4\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 4\natom.config.get('editor.tabLength', scope: ['source.js']) # => 4\n\n# Set ruby to 2\natom.config.set('editor.tabLength', 2, scopeSelector: 'source.ruby') # => true\n\n# Notice it's only set to 2 in the case of ruby\natom.config.get('editor.tabLength') # => 4\natom.config.get('editor.tabLength', scope: ['source.ruby']) # => 2\natom.config.get('editor.tabLength', scope: ['source.js']) # => 4\n```",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key.",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "value",
              "description": "The value of the setting. Passing `undefined` will revert the setting to the default value.",
              "type": null,
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "scopeSelector",
                  "description": "{String}. eg. '.source.ruby' See [the scopes docs](https://atom.io/docs/latest/advanced/scopes-and-scope-descriptors) for more information.",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "source",
                  "description": "{String} The name of a file with which the setting is associated. Defaults to the user's config file.",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}\n\n* `true` if the value was set.\n* `false` if the value was not able to be coerced to the type specified in the setting's schema."
            }
          ]
        },
        {
          "name": "unset",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L632",
          "visibility": "Essential",
          "summary": "Restore the setting at `keyPath` to its default value.",
          "description": "Restore the setting at `keyPath` to its default value.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "scopeSelector",
                  "description": "{String}. See {::set}",
                  "type": "String",
                  "isOptional": true
                },
                {
                  "name": "source",
                  "description": "{String}. See {::set} ",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ]
        },
        {
          "name": "getSources",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L665",
          "visibility": "Extended",
          "summary": "Get an {Array} of all of the `source` {String}s with which\nsettings have been added via {::set}. ",
          "description": "Get an {Array} of all of the `source` {String}s with which\nsettings have been added via {::set}. "
        },
        {
          "name": "getSchema",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L717",
          "visibility": "Extended",
          "summary": "Retrieve the schema for a specific key path. The schema will tell\nyou what type the keyPath expects, and other metadata about the config\noption.",
          "description": "Retrieve the schema for a specific key path. The schema will tell\nyou what type the keyPath expects, and other metadata about the config\noption.",
          "arguments": [
            {
              "name": "keyPath",
              "description": "The {String} name of the key.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} eg. `{type: 'integer', default: 23, minimum: 1}`."
            },
            {
              "type": null,
              "description": "Returns `null` when the keyPath has no schema specified."
            }
          ]
        },
        {
          "name": "getUserConfigPath",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L732",
          "visibility": "Extended",
          "summary": "Get the {String} path to the config file being used. ",
          "description": "Get the {String} path to the config file being used. "
        },
        {
          "name": "transact",
          "sectionName": "Managing Settings",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/config.coffee#L740",
          "visibility": "Extended",
          "summary": "Suppress calls to handler functions registered with {::onDidChange}\nand {::observe} for the duration of `callback`. After `callback` executes,\nhandlers will be called once if the value for their key-path has changed.",
          "description": "Suppress calls to handler functions registered with {::onDidChange}\nand {::observe} for the duration of `callback`. After `callback` executes,\nhandlers will be called once if the value for their key-path has changed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to execute while suppressing calls to handlers. ",
              "type": "Function",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Essential",
      "summary": "Used to access all of Atom's configuration details.",
      "description": "Used to access all of Atom's configuration details.\n\nAn instance of this class is always available as the `atom.config` global.\n\n## Getting and setting config settings.\n\n```coffee\n# Note that with no value set, ::get returns the setting's default value.\natom.config.get('my-package.myKey') # -> 'defaultValue'\n\natom.config.set('my-package.myKey', 'value')\natom.config.get('my-package.myKey') # -> 'value'\n```\n\nYou may want to watch for changes. Use {::observe} to catch changes to the setting.\n\n```coffee\natom.config.set('my-package.myKey', 'value')\natom.config.observe 'my-package.myKey', (newValue) ->\n  # `observe` calls immediately and every time the value is changed\n  console.log 'My configuration changed:', newValue\n```\n\nIf you want a notification only when the value changes, use {::onDidChange}.\n\n```coffee\natom.config.onDidChange 'my-package.myKey', ({newValue, oldValue}) ->\n  console.log 'My configuration changed:', newValue, oldValue\n```\n\n### Value Coercion\n\nConfig settings each have a type specified by way of a\n[schema](json-schema.org). For example we might an integer setting that only\nallows integers greater than `0`:\n\n```coffee\n# When no value has been set, `::get` returns the setting's default value\natom.config.get('my-package.anInt') # -> 12\n\n# The string will be coerced to the integer 123\natom.config.set('my-package.anInt', '123')\natom.config.get('my-package.anInt') # -> 123\n\n# The string will be coerced to an integer, but it must be greater than 0, so is set to 1\natom.config.set('my-package.anInt', '-20')\natom.config.get('my-package.anInt') # -> 1\n```\n\n## Defining settings for your package\n\nDefine a schema under a `config` key in your package main.\n\n```coffee\nmodule.exports =\n  # Your config schema\n  config:\n    someInt:\n      type: 'integer'\n      default: 23\n      minimum: 1\n\n  activate: (state) -> # ...\n  # ...\n```\n\nSee [Creating a Package](https://atom.io/docs/latest/creating-a-package) for\nmore info.\n\n## Config Schemas\n\nWe use [json schema](http://json-schema.org) which allows you to define your value's\ndefault, the type it should be, etc. A simple example:\n\n```coffee\n# We want to provide an `enableThing`, and a `thingVolume`\nconfig:\n  enableThing:\n    type: 'boolean'\n    default: false\n  thingVolume:\n    type: 'integer'\n    default: 5\n    minimum: 1\n    maximum: 11\n```\n\nThe type keyword allows for type coercion and validation. If a `thingVolume` is\nset to a string `'10'`, it will be coerced into an integer.\n\n```coffee\natom.config.set('my-package.thingVolume', '10')\natom.config.get('my-package.thingVolume') # -> 10\n\n# It respects the min / max\natom.config.set('my-package.thingVolume', '400')\natom.config.get('my-package.thingVolume') # -> 11\n\n# If it cannot be coerced, the value will not be set\natom.config.set('my-package.thingVolume', 'cats')\natom.config.get('my-package.thingVolume') # -> 11\n```\n\n### Supported Types\n\nThe `type` keyword can be a string with any one of the following. You can also\nchain them by specifying multiple in an an array. For example\n\n```coffee\nconfig:\n  someSetting:\n    type: ['boolean', 'integer']\n    default: 5\n\n# Then\natom.config.set('my-package.someSetting', 'true')\natom.config.get('my-package.someSetting') # -> true\n\natom.config.set('my-package.someSetting', '12')\natom.config.get('my-package.someSetting') # -> 12\n```\n\n#### string\n\nValues must be a string.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'string'\n    default: 'hello'\n```\n\n#### integer\n\nValues will be coerced into integer. Supports the (optional) `minimum` and\n`maximum` keys.\n\n```coffee\n  config:\n    someSetting:\n      type: 'integer'\n      default: 5\n      minimum: 1\n      maximum: 11\n```\n\n#### number\n\nValues will be coerced into a number, including real numbers. Supports the\n(optional) `minimum` and `maximum` keys.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'number'\n    default: 5.3\n    minimum: 1.5\n    maximum: 11.5\n```\n\n#### boolean\n\nValues will be coerced into a Boolean. `'true'` and `'false'` will be coerced into\na boolean. Numbers, arrays, objects, and anything else will not be coerced.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'boolean'\n    default: false\n```\n\n#### array\n\nValue must be an Array. The types of the values can be specified by a\nsubschema in the `items` key.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'array'\n    default: [1, 2, 3]\n    items:\n      type: 'integer'\n      minimum: 1.5\n      maximum: 11.5\n```\n\n#### object\n\nValue must be an object. This allows you to nest config options. Sub options\nmust be under a `properties key`\n\n```coffee\nconfig:\n  someSetting:\n    type: 'object'\n    properties:\n      myChildIntOption:\n        type: 'integer'\n        minimum: 1.5\n        maximum: 11.5\n```\n\n#### color\n\nValues will be coerced into a {Color} with `red`, `green`, `blue`, and `alpha`\nproperties that all have numeric values. `red`, `green`, `blue` will be in\nthe range 0 to 255 and `value` will be in the range 0 to 1. Values can be any\nvalid CSS color format such as `#abc`, `#abcdef`, `white`,\n`rgb(50, 100, 150)`, and `rgba(25, 75, 125, .75)`.\n\n```coffee\nconfig:\n  someSetting:\n    type: 'color'\n    default: 'white'\n```\n\n### Other Supported Keys\n\n#### enum\n\nAll types support an `enum` key. The enum key lets you specify all values\nthat the config setting can possibly be. `enum` _must_ be an array of values\nof your specified type. Schema:\n\n```coffee\nconfig:\n  someSetting:\n    type: 'integer'\n    default: 4\n    enum: [2, 4, 6, 8]\n```\n\nUsage:\n\n```coffee\natom.config.set('my-package.someSetting', '2')\natom.config.get('my-package.someSetting') # -> 2\n\n# will not set values outside of the enum values\natom.config.set('my-package.someSetting', '3')\natom.config.get('my-package.someSetting') # -> 2\n\n# If it cannot be coerced, the value will not be set\natom.config.set('my-package.someSetting', '4')\natom.config.get('my-package.someSetting') # -> 4\n```\n\n#### title and description\n\nThe settings view will use the `title` and `description` keys to display your\nconfig setting in a readable way. By default the settings view humanizes your\nconfig key, so `someSetting` becomes `Some Setting`. In some cases, this is\nconfusing for users, and a more descriptive title is useful.\n\nDescriptions will be displayed below the title in the settings view.\n\n```coffee\nconfig:\n  someSetting:\n    title: 'Setting Magnitude'\n    description: 'This will affect the blah and the other blah'\n    type: 'integer'\n    default: 4\n```\n\n__Note__: You should strive to be so clear in your naming of the setting that\nyou do not need to specify a title or description!\n\n## Best practices\n\n* Don't depend on (or write to) configuration keys outside of your keypath."
    },
    "Contact": {
      "name": "Contact",
      "superClass": "Model",
      "filename": "src/flux/models/contact.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/contact.coffee#L36",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "toString",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/contact.coffee#L70",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a string of the format `Full Name <email@address.com>` if\nthe contact has a populated name, just the email address otherwise."
            }
          ]
        },
        {
          "name": "isMe",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/contact.coffee#L84",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the contact is the current user, false otherwise.\nYou should use this method instead of comparing the user's email address to\nthe account email, since it is case-insensitive and future-proof."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Contact model represents a Contact object served by the Nylas Platform API.\nFor more information about Contacts on the Nylas Platform, read the\n[Contacts API Documentation](https://nylas.com/docs/api#contacts)",
      "description": "The Contact model represents a Contact object served by the Nylas Platform API.\nFor more information about Contacts on the Nylas Platform, read the\n[Contacts API Documentation](https://nylas.com/docs/api#contacts)\n\n## Attributes\n\n`name`: {AttributeString} The name of the contact. Queryable.\n\n`email`: {AttributeString} The email address of the contact. Queryable.\n\n`thirdPartyData`: {AttributeObject} Extra data that we find out about a\ncontact.  The data is keyed by the 3rd party service that dumped the data\nthere. The value is an object of raw data in the form that the service\nprovides\n\nWe also have \"normalized\" optional data for each contact. This list may\ngrow as the needs of a contact become more complex.\n\nThis class also inherits attributes from {Model}\n\nSection: Models"
    },
    "ContactStore": {
      "name": "ContactStore",
      "superClass": "NylasStore",
      "filename": "src/flux/stores/contact-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/contact-store.coffee#L137",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "searchContacts",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/contact-store.coffee#L163",
          "visibility": "Public",
          "summary": "Search the user's contact list for the given search term.\nThis method compares the `search` string against each Contact's\n`name` and `email`.",
          "description": "Search the user's contact list for the given search term.\nThis method compares the `search` string against each Contact's\n`name` and `email`.",
          "arguments": [
            {
              "name": "search",
              "description": "{String} A search phrase, such as `ben@n` or `Ben G`",
              "type": "String",
              "isOptional": false
            },
            {
              "name": "options",
              "description": "{Object} If you will only be displaying a few results, you should pass a limit value. {::searchContacts} will return as soon as `limit` matches have been found.",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of matching {Contact} models"
            }
          ]
        },
        {
          "name": "isValidContact",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/contact-store.coffee#L216",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Contact",
              "description": "Returns true if the contact provided is a {Contact} instance and\ncontains a properly formatted email address."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "ContactStore maintains an in-memory cache of the user's address\nbook, making it easy to build autocompletion functionality and resolve\nthe names associated with email addresses.",
      "description": "ContactStore maintains an in-memory cache of the user's address\nbook, making it easy to build autocompletion functionality and resolve\nthe names associated with email addresses.\n\n## Listening for Changes\n\nThe ContactStore monitors the {DatabaseStore} for changes to {Contact} models\nand triggers when contacts have changed, allowing your stores and components\nto refresh data based on the ContactStore.\n\n```coffee\n@unsubscribe = ContactStore.listen(@_onContactsChanged, @)\n\n_onContactsChanged: ->\n  # refresh your contact results\n```\n\nSection: Stores"
    },
    "DatabaseStore": {
      "name": "DatabaseStore",
      "superClass": "NylasStore",
      "filename": "src/flux/stores/database-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L78",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "find",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L289",
          "visibility": "Public",
          "summary": "Creates a new Model Query for retrieving a single model specified by\nthe class and id.",
          "description": "Creates a new Model Query for retrieving a single model specified by\nthe class and id.\n\nExample:\n\n```coffee\nDatabaseStore.find(Thread, 'id-123').then (thread) ->\n  # thread is a Thread object, or null if no match was found.\n```",
          "arguments": [
            {
              "name": "class",
              "description": "The class of the {Model} you're trying to retrieve.",
              "type": "Model",
              "isOptional": false
            },
            {
              "name": "id",
              "description": "The {String} id of the {Model} you're trying to retrieve",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "ModelQuery",
              "description": "Returns a {ModelQuery}"
            }
          ]
        },
        {
          "name": "findBy",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L303",
          "visibility": "Public",
          "summary": "Creates a new Model Query for retrieving a single model matching the\npredicates provided.",
          "description": "Creates a new Model Query for retrieving a single model matching the\npredicates provided.",
          "arguments": [
            {
              "name": "class",
              "description": "The class of the {Model} you're trying to retrieve.",
              "type": "Model",
              "isOptional": false
            },
            {
              "name": "predicates",
              "description": "An {Array} of {matcher} objects. The set of predicates the  returned model must match.",
              "type": "Array",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "ModelQuery",
              "description": "Returns a {ModelQuery}"
            }
          ]
        },
        {
          "name": "findAll",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L316",
          "visibility": "Public",
          "summary": "Creates a new Model Query for retrieving all models matching the\npredicates provided.",
          "description": "Creates a new Model Query for retrieving all models matching the\npredicates provided.",
          "arguments": [
            {
              "name": "class",
              "description": "The class of the {Model} you're trying to retrieve.",
              "type": "Model",
              "isOptional": false
            },
            {
              "name": "predicates",
              "description": "An {Array} of {matcher} objects. The set of predicates the  returned model must match.",
              "type": "Array",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "ModelQuery",
              "description": "Returns a {ModelQuery}"
            }
          ]
        },
        {
          "name": "count",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L329",
          "visibility": "Public",
          "summary": "Creates a new Model Query that returns the {Number} of models matching\nthe predicates provided.",
          "description": "Creates a new Model Query that returns the {Number} of models matching\nthe predicates provided.",
          "arguments": [
            {
              "name": "class",
              "description": "The class of the {Model} you're trying to retrieve.",
              "type": "Model",
              "isOptional": false
            },
            {
              "name": "predicates",
              "description": "An {Array} of {matcher} objects. The set of predicates the  returned model must match.",
              "type": "Array",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "ModelQuery",
              "description": "Returns a {ModelQuery}"
            }
          ]
        },
        {
          "name": "modelify",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L342",
          "visibility": "Public",
          "summary": "Modelify converts the provided array of IDs or models (or a mix of\nIDs and models) into an array of models of the `klass` provided by querying for the missing items.",
          "description": "Modelify converts the provided array of IDs or models (or a mix of\nIDs and models) into an array of models of the `klass` provided by querying for the missing items.\n\nModelify is efficient and uses a single database query. It resolves Immediately\nif no query is necessary.",
          "arguments": [
            {
              "name": "class",
              "description": "The {Model} class desired.",
              "type": "Model",
              "isOptional": false
            },
            {
              "name": null,
              "description": "'arr' An {Array} with a mix of string model IDs and/or models.",
              "type": null
            }
          ]
        },
        {
          "name": "run",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L393",
          "visibility": "Public",
          "summary": "Executes a {ModelQuery} on the local database.",
          "description": "Executes a {ModelQuery} on the local database.",
          "arguments": [
            {
              "name": "modelQuery",
              "description": "A {ModelQuery} to execute.",
              "type": "ModelQuery",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that\n\n* resolves with the result of the database query."
            }
          ]
        },
        {
          "name": "persistModel",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L411",
          "visibility": "Public",
          "summary": "Asynchronously writes `model` to the cache and triggers a change event.",
          "description": "Asynchronously writes `model` to the cache and triggers a change event.",
          "arguments": [
            {
              "name": "model",
              "description": "A {Model} to write to the database.",
              "type": "Model",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that\n\n* resolves after the database queries are complete and any listening\n  database callbacks have finished\n* rejects if any databse query fails or one of the triggering\n  callbacks failed"
            }
          ]
        },
        {
          "name": "persistModels",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L428",
          "visibility": "Public",
          "summary": "Asynchronously writes `models` to the cache and triggers a single change\nevent. Note: Models must be of the same class to be persisted in a batch operation.",
          "description": "Asynchronously writes `models` to the cache and triggers a single change\nevent. Note: Models must be of the same class to be persisted in a batch operation.",
          "arguments": [
            {
              "name": "models",
              "description": "An {Array} of {Model} objects to write to the database.",
              "type": "Array",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that\n\n* resolves after the database queries are complete and any listening\n  database callbacks have finished\n* rejects if any databse query fails or one of the triggering\n  callbacks failed"
            }
          ]
        },
        {
          "name": "unpersistModel",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-store.coffee#L455",
          "visibility": "Public",
          "summary": "Asynchronously removes `model` from the cache and triggers a change event.",
          "description": "Asynchronously removes `model` from the cache and triggers a change event.",
          "arguments": [
            {
              "name": "model",
              "description": "A {Model} to write to the database.",
              "type": "Model",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that\n\n* resolves after the database queries are complete and any listening\n  database callbacks have finished\n* rejects if any databse query fails or one of the triggering\n  callbacks failed"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "N1 is built on top of a custom database layer modeled after\nActiveRecord. For many parts of the application, the database is the source\nof truth. Data is retrieved from the API, written to the database, and changes\nto the database trigger Stores and components to refresh their contents.",
      "description": "N1 is built on top of a custom database layer modeled after\nActiveRecord. For many parts of the application, the database is the source\nof truth. Data is retrieved from the API, written to the database, and changes\nto the database trigger Stores and components to refresh their contents.\n\nThe DatabaseStore is available in every application window and allows you to\nmake queries against the local cache. Every change to the local cache is\nbroadcast as a change event, and listening to the DatabaseStore keeps the\nrest of the application in sync.\n\n## Listening for Changes\n\nTo listen for changes to the local cache, subscribe to the DatabaseStore and\ninspect the changes that are sent to your listener method.\n\n```coffeescript\n@unsubscribe = DatabaseStore.listen(@_onDataChanged, @)\n\n...\n\n_onDataChanged: (change) ->\n  return unless change.objectClass is Message\n  return unless @_myMessageID in _.map change.objects, (m) -> m.id\n\n  # Refresh Data\n```\n\nThe local cache changes very frequently, and your stores and components should\ncarefully choose when to refresh their data. The `change` object passed to your\nevent handler allows you to decide whether to refresh your data and exposes\nthe following keys:\n\n`objectClass`: The {Model} class that has been changed. If multiple types of models\nwere saved to the database, you will receive multiple change events.\n\n`objects`: An {Array} of {Model} instances that were either created, updated or\ndeleted from the local cache. If your component or store presents a single object\nor a small collection of objects, you should look to see if any of the objects\nare in your displayed set before refreshing.\n\nSection: Database"
    },
    "DatabaseView": {
      "name": "DatabaseView",
      "superClass": "ModelView",
      "filename": "src/flux/stores/database-view.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-view.coffee#L62",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "invalidate",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/database-view.coffee#L138",
          "visibility": "Public",
          "summary": "Call this method when the DatabaseStore triggers and will impact the\ndata maintained by this DatabaseView. In the future, the DatabaseView will\nprobably observe the DatabaseView directly.",
          "description": "Call this method when the DatabaseStore triggers and will impact the\ndata maintained by this DatabaseView. In the future, the DatabaseView will\nprobably observe the DatabaseView directly.\n\nTODO: In order for the DatabaseView to monitor the DatabaseStore directly,\nit needs to have some way of detatching it's listener when it's no longer needed!\nNeed a destructor...",
          "arguments": [
            {
              "children": [
                {
                  "name": "change",
                  "description": "The change object provided by the DatabaseStore, with `items` and a `type`.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "shallow",
                  "description": "True if this change will not invalidate item metadata, only items.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "options",
              "description": "an Object with the following optional keys which can be used to optimize the behavior of the DatabaseView:",
              "type": null,
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "DatabaseView abstracts away the process of paginating a query\nand loading ranges of data. It's very smart about deciding when\nresults need to be refreshed. There are a few core concepts that\nmake it flexible:",
      "description": "DatabaseView abstracts away the process of paginating a query\nand loading ranges of data. It's very smart about deciding when\nresults need to be refreshed. There are a few core concepts that\nmake it flexible:\n\nmetadataProvider: For each item loaded, you can provide a promise\nthat resolves with additional data for that item. The DatabaseView\nwill not consider the page of data \"loaded\" until all the metadata\npromises have resolved.  (Used for message metadata on threads)\n\nretainedRange: The retained range ({start, end}) represents the\nobjects currently being displayed. React components displaying the\nview can alter the retained range as the user scrolls.\n\nNote: Do not make the retainedRange larger than you need. The\nDatabaseView may internally keep a larger set of items loaded\nfor performance.\n\nSection: Database"
    },
    "DraftChangeSet": {
      "name": "DraftChangeSet",
      "filename": "src/flux/stores/draft-store-proxy.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-proxy.coffee#L25",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "As the user interacts with the draft, changes are accumulated in the\nDraftChangeSet associated with the store proxy. The DraftChangeSet does two things:",
      "description": "As the user interacts with the draft, changes are accumulated in the\nDraftChangeSet associated with the store proxy. The DraftChangeSet does two things:\n\n1. It debounces changes and calls Actions.saveDraft() at a reasonable interval.\n1. It exposes `applyToModel`, which allows you to optimistically apply changes\n  to a draft object. When the proxy vends the draft, it passes it through this\n  function to apply uncommitted changes. This means the Draft provided by the\n  DraftStoreProxy will always relfect recent changes, even though they're\n  written to the database intermittently.\n\nSection: Drafts"
    },
    "DraftStore": {
      "name": "DraftStore",
      "filename": "src/flux/stores/draft-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store.coffee#L41",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "sessionForClientId",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store.coffee#L117",
          "visibility": "Public",
          "summary": "Fetch a {DraftStoreProxy} for displaying and/or editing the\ndraft with `clientId`.",
          "description": "Fetch a {DraftStoreProxy} for displaying and/or editing the\ndraft with `clientId`.\n\nExample:\n\n```coffee\nsession = DraftStore.sessionForClientId(clientId)\nsession.prepare().then ->\n   # session.draft() is now ready\n```",
          "arguments": [
            {
              "name": "clientId",
              "description": "The {String} clientId of the draft.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves to an {DraftStoreProxy} for the\ndraft once it has been prepared:"
            }
          ]
        },
        {
          "name": "isSendingDraft",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store.coffee#L125",
          "visibility": "Public",
          "summary": "Look up the sending state of the given draftClientId.\nIn popout windows the existance of the window is the sending state. ",
          "description": "Look up the sending state of the given draftClientId.\nIn popout windows the existance of the window is the sending state. "
        },
        {
          "name": "extensions",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store.coffee#L133",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the extensions registered with the DraftStore."
            }
          ]
        },
        {
          "name": "registerExtension",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store.coffee#L142",
          "visibility": "Public",
          "summary": "Registers a new extension with the DraftStore. DraftStore extensions\nmake it possible to extend the editor experience, modify draft contents,\ndisplay warnings before draft are sent, and more.",
          "description": "Registers a new extension with the DraftStore. DraftStore extensions\nmake it possible to extend the editor experience, modify draft contents,\ndisplay warnings before draft are sent, and more.",
          "arguments": [
            {
              "name": "ext",
              "description": "A {DraftStoreExtension} instance.",
              "type": "DraftStoreExtension",
              "isOptional": false
            }
          ]
        },
        {
          "name": "unregisterExtension",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store.coffee#L149",
          "visibility": "Public",
          "summary": "Unregisters the extension provided from the DraftStore.",
          "description": "Unregisters the extension provided from the DraftStore.",
          "arguments": [
            {
              "name": "ext",
              "description": "A {DraftStoreExtension} instance.",
              "type": "DraftStoreExtension",
              "isOptional": false
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "DraftStore responds to Actions that interact with Drafts and exposes\npublic getter methods to return Draft objects and sessions.",
      "description": "DraftStore responds to Actions that interact with Drafts and exposes\npublic getter methods to return Draft objects and sessions.\n\nIt also creates and queues {Task} objects to persist changes to the Nylas\nAPI.\n\nRemember that a \"Draft\" is actually just a \"Message\" with `draft: true`.\n\nSection: Drafts"
    },
    "DraftStoreExtension": {
      "name": "DraftStoreExtension",
      "filename": "src/flux/stores/draft-store-extension.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L32",
      "sections": [],
      "classMethods": [
        {
          "name": "warningsForSending",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L43",
          "visibility": "Public",
          "summary": "Inspect the draft, and return any warnings that need to be displayed before\nthe draft is sent. Warnings should be string phrases, such as \"without an attachment\"\nthat fit into a message of the form: \"Send #{phase1} and #{phase2}?\"",
          "description": "Inspect the draft, and return any warnings that need to be displayed before\nthe draft is sent. Warnings should be string phrases, such as \"without an attachment\"\nthat fit into a message of the form: \"Send #{phase1} and #{phase2}?\"",
          "arguments": [
            {
              "name": "draft",
              "description": "A fully populated {Message} object that is about to be sent.",
              "type": "Message",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a list of warning strings, or an empty array if no warnings need to be displayed."
            }
          ]
        },
        {
          "name": "composerToolbar",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L66",
          "visibility": "Public",
          "summary": "declare an icon to be displayed in the composer's toolbar (where\nbold, italic, underline, etc are).",
          "description": "declare an icon to be displayed in the composer's toolbar (where\nbold, italic, underline, etc are).\n\nYou must declare the following properties:",
          "arguments": [
            {
              "name": "mutator",
              "description": "A function that's called when your toolbar button is clicked. This mutator function will be passed as its only argument the `dom`. The `dom` is the full {DOM} object of the current composer. You may mutate this in place. We don't care about the mutator's return value.",
              "type": "DOM",
              "isOptional": false
            },
            {
              "name": "tooltip",
              "description": "A one or two word description of what your icon does",
              "type": null,
              "isOptional": false
            },
            {
              "name": "iconUrl",
              "description": "The url of your icon. It should be in the `nylas://` scheme. For example: `nylas://your-package-name/assets/my-icon@2x.png`. Note, we will downsample your image by 2x (for Retina screens), so make sure it's twice the resolution. The icon should be black and white. We will directly pass the `url` prop of a {RetinaImg}",
              "type": "RetinaImg",
              "isOptional": false
            }
          ]
        },
        {
          "name": "prepareNewDraft",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L80",
          "visibility": "Public",
          "summary": "Override prepareNewDraft to modify a brand new draft before it is displayed\nin a composer. This is one of the only places in the application where it's safe\nto modify the draft object you're given directly to add participants to the draft,\nadd a signature, etc.",
          "description": "Override prepareNewDraft to modify a brand new draft before it is displayed\nin a composer. This is one of the only places in the application where it's safe\nto modify the draft object you're given directly to add participants to the draft,\nadd a signature, etc.\n\nBy default, new drafts are considered `pristine`. If the user leaves the composer\nwithout making any changes, the draft is discarded. If your extension populates\nthe draft in a way that makes it \"populated\" in a valuable way, you should set\n`draft.pristine = false` so the draft saves, even if no further changes are made."
        },
        {
          "name": "finalizeSessionBeforeSending",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L102",
          "visibility": "Public",
          "summary": "Override finalizeSessionBeforeSending in your DraftStoreExtension subclass to transform\nthe {DraftStoreProxy} editing session just before the draft is sent. This method\ngives you an opportunity to make any final substitutions or changes after any\n{::warningsForSending} have been displayed.",
          "description": "Override finalizeSessionBeforeSending in your DraftStoreExtension subclass to transform\nthe {DraftStoreProxy} editing session just before the draft is sent. This method\ngives you an opportunity to make any final substitutions or changes after any\n{::warningsForSending} have been displayed.\n\nExample:\n\n```coffee\n# Remove any <code> tags found in the draft body\nfinalizeSessionBeforeSending: (session) ->\n  body = session.draft().body\n  clean = body.replace(/<\\/?code[^>]*>/g, '')\n  if body != clean\n    session.changes.add(body: clean)\n```",
          "arguments": [
            {
              "name": "session",
              "description": "A {DraftStoreProxy} for the draft.",
              "type": "DraftStoreProxy",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onMouseUp",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L118",
          "visibility": "Public",
          "summary": "Override onMouseUp in your DraftStoreExtension subclass to\nlisten for mouse up events sent to the composer's body text area. This\nhook provides the contenteditable DOM Node itself, allowing you to\nadjust selection ranges and change content as necessary.",
          "description": "Override onMouseUp in your DraftStoreExtension subclass to\nlisten for mouse up events sent to the composer's body text area. This\nhook provides the contenteditable DOM Node itself, allowing you to\nadjust selection ranges and change content as necessary.",
          "arguments": [
            {
              "name": "editableNode",
              "description": "The composer's contenteditable {Node} that received the event.",
              "type": "Node",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "The currently selected {Range} in the `editableNode`",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "event",
              "description": "The mouse up event.",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "onFocusPrevious",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L134",
          "visibility": "Public",
          "summary": "Called when the user presses `Shift-Tab` while focused on the composer's body field.\nOverride onFocusPrevious in your DraftStoreExtension to adjust the selection or perform\nother actions. If your package implements Shift-Tab behavior in a particular scenario, you\nshould prevent the default behavior of Shift-Tab via `event.preventDefault()`.",
          "description": "Called when the user presses `Shift-Tab` while focused on the composer's body field.\nOverride onFocusPrevious in your DraftStoreExtension to adjust the selection or perform\nother actions. If your package implements Shift-Tab behavior in a particular scenario, you\nshould prevent the default behavior of Shift-Tab via `event.preventDefault()`.",
          "arguments": [
            {
              "name": "editableNode",
              "description": "The composer's contenteditable {Node} that received the event.",
              "type": "Node",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "The currently selected {Range} in the `editableNode`",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "event",
              "description": "The mouse up event.",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "onFocusNext",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L151",
          "visibility": "Public",
          "summary": "Called when the user presses `Tab` while focused on the composer's body field.\nOverride onFocusPrevious in your DraftStoreExtension to adjust the selection or perform\nother actions. If your package implements Tab behavior in a particular scenario, you\nshould prevent the default behavior of Tab via `event.preventDefault()`.",
          "description": "Called when the user presses `Tab` while focused on the composer's body field.\nOverride onFocusPrevious in your DraftStoreExtension to adjust the selection or perform\nother actions. If your package implements Tab behavior in a particular scenario, you\nshould prevent the default behavior of Tab via `event.preventDefault()`.",
          "arguments": [
            {
              "name": "editableNode",
              "description": "The composer's contenteditable {Node} that received the event.",
              "type": "Node",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "The currently selected {Range} in the `editableNode`",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "event",
              "description": "The mouse up event.",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "onInput",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-extension.coffee#L186",
          "visibility": "Public",
          "summary": "Override onInput in your DraftStoreExtension subclass to\nimplement custom behavior as the user types in the composer's\ncontenteditable body field.",
          "description": "Override onInput in your DraftStoreExtension subclass to\nimplement custom behavior as the user types in the composer's\ncontenteditable body field.\n\nAs the first argument you are passed the entire DOM object of the\ncomposer. You may mutate this object and edit it in place.\n\nExample:\n\nThe Nylas `templates` package uses this method to see if the user has populated a\n`<code>` tag placed in the body and change it's CSS class to reflect that it is no\nlonger empty.\n\n```coffee\nonInput: (editableNode, event) ->\n  selection = document.getSelection()\n\n  isWithinNode = (node) ->\n    test = selection.baseNode\n    while test isnt editableNode\n      return true if test is node\n      test = test.parentNode\n    return false\n\n  codeTags = editableNode.querySelectorAll('code.var.empty')\n  for codeTag in codeTags\n    if selection.containsNode(codeTag) or isWithinNode(codeTag)\n      codeTag.classList.remove('empty')\n```"
        }
      ],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "DraftStoreExtension is an abstract base class. To create DraftStoreExtensions\nthat enhance the composer experience, you should subclass {DraftStoreExtension} and\nimplement the class methods your plugin needs.",
      "description": "DraftStoreExtension is an abstract base class. To create DraftStoreExtensions\nthat enhance the composer experience, you should subclass {DraftStoreExtension} and\nimplement the class methods your plugin needs.\n\nTo register your extension with the DraftStore, call {DraftStore::registerExtension}.\nWhen your package is being unloaded, you *must* call the corresponding\n{DraftStore::unregisterExtension} to unhook your extension.\n\n```coffee\nactivate: ->\n  DraftStore.registerExtension(MyExtension)\n\n...\n\ndeactivate: ->\n  DraftStore.unregisterExtension(MyExtension)\n```\n\nYour DraftStoreExtension subclass should be stateless. The user may have multiple drafts\nopen at any time, and the methods of your DraftStoreExtension may be called for different\ndrafts at any time. You should not expect that the session you receive in\n {::finalizeSessionBeforeSending} is for the same draft you previously received in\n {::warningsForSending}, etc.\n\nThe DraftStoreExtension API does not currently expose any asynchronous or {Promise}-based APIs.\nThis will likely change in the future. If you have a use-case for a Draft Store extension that\nis not possible with the current API, please let us know.\n\nSection: Drafts"
    },
    "DraftStoreProxy": {
      "name": "DraftStoreProxy",
      "filename": "src/flux/stores/draft-store-proxy.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-proxy.coffee#L80",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "draft",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-proxy.coffee#L104",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the draft object with the latest changes applied."
            }
          ]
        },
        {
          "name": "draftPristineBody",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/draft-store-proxy.coffee#L112",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the initial body of the draft when it was pristine, or null if the\ndraft was never pristine in this editing session. Useful for determining if the\nbody is still in an unchanged / empty state."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "DraftStoreProxy is a small class that makes it easy to implement components\nthat display Draft objects or allow for interactive editing of Drafts.",
      "description": "DraftStoreProxy is a small class that makes it easy to implement components\nthat display Draft objects or allow for interactive editing of Drafts.\n\n1. It synchronously provides an instance of a draft via `draft()`, and\n  triggers whenever that draft instance has changed.\n1. It provides an interface for modifying the draft that transparently\n  batches changes, and ensures that the draft provided via `draft()`\n  always has pending changes applied.\n\nSection: Drafts"
    },
    "DraggableImg": {
      "name": "DraggableImg",
      "superClass": "React",
      "filename": "draggable-img.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Images are supposed to by default show a ghost image when dragging and\ndropping. Unfortunately this does not work in Electron. Since we're a\ndesktop app we don't want all images draggable, but we do want some (like\nattachments) to be able to be dragged away with a preview image.",
      "description": "Images are supposed to by default show a ghost image when dragging and\ndropping. Unfortunately this does not work in Electron. Since we're a\ndesktop app we don't want all images draggable, but we do want some (like\nattachments) to be able to be dragged away with a preview image."
    },
    "EventStore": {
      "name": "EventStore",
      "superClass": "NylasStore",
      "filename": "src/flux/stores/event-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/event-store.coffee#L33",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "EventStore maintains",
      "description": "EventStore maintains\n\n## Listening for Changes\n\nThe EventStore monitors the {DatabaseStore} for changes to {Event} models\nand triggers when events have changed, allowing your stores and components\nto refresh data based on the EventStore.\n\n```coffee\n@unsubscribe = EventStore.listen(@_onEventsChanged, @)\n\n_onEventsChanged: ->\n  # refresh your event results\n```\n\nSection: Stores"
    },
    "EventedIFrame": {
      "name": "EventedIFrame",
      "superClass": "React",
      "filename": "evented-iframe.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "documentWasReplaced",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Call this method if you replace the contents of the iframe's document.\nThis allows {EventedIframe} to re-attach it's event listeners.",
          "description": "Call this method if you replace the contents of the iframe's document.\nThis allows {EventedIframe} to re-attach it's event listeners."
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "EventedIFrame is a thin wrapper around the DOM's standard `<iframe>` element.\nYou should always use EventedIFrame, because it provides important event hooks that\nensure keyboard and mouse events are properly delivered to the application when\nfired within iFrames.",
      "description": "EventedIFrame is a thin wrapper around the DOM's standard `<iframe>` element.\nYou should always use EventedIFrame, because it provides important event hooks that\nensure keyboard and mouse events are properly delivered to the application when\nfired within iFrames.\n\n```\n<div className=\"file-frame-container\">\n  <EventedIFrame src={src} />\n  <Spinner visible={!@state.ready} />\n</div>\n```\n\nAny `props` added to the <EventedIFrame> are passed to the iFrame it renders.\n\nSection: Component Kit"
    },
    "File": {
      "name": "File",
      "superClass": "Model",
      "filename": "src/flux/models/file.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/file.coffee#L27",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "displayName",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/file.coffee#L56",
          "visibility": "Public",
          "summary": "Files can have empty names, or no name. `displayName` returns the file's\nname if one is present, and falls back to appropriate default name based on\nthe contentType. It will always return a non-empty string.",
          "description": "Files can have empty names, or no name. `displayName` returns the file's\nname if one is present, and falls back to appropriate default name based on\nthe contentType. It will always return a non-empty string."
        },
        {
          "name": "displayExtension",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/file.coffee#L77",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the file extension that should be used for this file.\nNote that asking for the displayExtension is more accurate than trying to read\nthe extension directly off the filename. The returned extension may be based\non contentType and is always lowercase."
            },
            {
              "type": null,
              "description": "Returns the extension without the leading '.' (ex: 'png', 'pdf')"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "File model represents a File object served by the Nylas Platform API.\nFor more information about Files on the Nylas Platform, read the\n[Files API Documentation](https://nylas.com/docs/api#files)",
      "description": "File model represents a File object served by the Nylas Platform API.\nFor more information about Files on the Nylas Platform, read the\n[Files API Documentation](https://nylas.com/docs/api#files)\n\n## Attributes\n\n`filename`: {AttributeString} The display name of the file. Queryable.\n\n`size`: {AttributeNumber} The size of the file, in bytes.\n\n`contentType`: {AttributeString} The content type of the file (ex: `image/png`)\n\n`contentId`: {AttributeString} If this file is an inline attachment, contentId\nis a string that matches a cid:<value> found in the HTML body of a {Message}.\n\nThis class also inherits attributes from {Model}\n\nSection: Models"
    },
    "Flexbox": {
      "name": "Flexbox",
      "superClass": "React",
      "filename": "flexbox.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by Flexbox:",
          "description": "React `props` supported by Flexbox:",
          "arguments": [
            {
              "name": "direction",
              "description": "A {String} Flexbox direction: either `column` or `row`.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "style",
              "description": "An {Object} with styles to apply to the flexbox.",
              "type": "Object",
              "isOptional": true
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "A simple wrapper that provides a Flexbox layout with the given direction and style.\nAny additional props you set on the Flexbox are rendered.",
      "description": "A simple wrapper that provides a Flexbox layout with the given direction and style.\nAny additional props you set on the Flexbox are rendered.\n\nSection: Component Kit"
    },
    "FocusTrackingRegion": {
      "name": "FocusTrackingRegion",
      "superClass": "React",
      "filename": "focus-tracking-region.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "FocusTrackingRegion is a small wrap component that renders it's children\nand any props it's provided. Whenever the document's focus is inside the\nFocusTrackingRegion, it has an additional CSS class: `focused`",
      "description": "FocusTrackingRegion is a small wrap component that renders it's children\nand any props it's provided. Whenever the document's focus is inside the\nFocusTrackingRegion, it has an additional CSS class: `focused`"
    },
    "FocusedContentStore": {
      "name": "FocusedContentStore",
      "filename": "src/flux/stores/focused-content-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/focused-content-store.coffee#L53",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "focused",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/focused-content-store.coffee#L145",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "collection",
              "description": "The {String} name of a collection. Standard collections are listed above.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Model",
              "description": "Returns the focused {Model} in the collection specified,\nor undefined if no item is focused."
            }
          ]
        },
        {
          "name": "focusedId",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/focused-content-store.coffee#L155",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "collection",
              "description": "The {String} name of a collection. Standard collections are listed above.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Model",
              "description": "Returns the ID of the focused {Model} in the collection specified,\nor undefined if no item is focused."
            }
          ]
        },
        {
          "name": "keyboardCursor",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/focused-content-store.coffee#L167",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "collection",
              "description": "The {String} name of a collection. Standard collections are listed above.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Model",
              "description": "Returns the {Model} the keyboard is currently focused on\nin the collection specified. Keyboard focus is not always separate from\nprimary focus (selection). You can use {::keyboardCursorEnabled} to determine\nwhether keyboard focus is enabled."
            }
          ]
        },
        {
          "name": "keyboardCursorId",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/focused-content-store.coffee#L179",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "collection",
              "description": "The {String} name of a collection. Standard collections are listed above.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Model",
              "description": "Returns the ID of the {Model} the keyboard is currently focused on\nin the collection specified. Keyboard focus is not always separate from\nprimary focus (selection). You can use {::keyboardCursorEnabled} to determine\nwhether keyboard focus is enabled."
            }
          ]
        },
        {
          "name": "keyboardCursorEnabled",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/focused-content-store.coffee#L187",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} - `true` if the keyboard cursor concept applies in\nthe current {WorkspaceStore} layout mode. The keyboard cursor is currently only\nenabled in `list` mode."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The FocusedContentStore provides access to the objects currently selected\nor otherwise focused in the window. Normally, focus would be maintained internally\nby components that show models. The FocusedContentStore makes the concept of\nselection public so that you can observe focus changes and trigger your own changes\nto focus.",
      "description": "The FocusedContentStore provides access to the objects currently selected\nor otherwise focused in the window. Normally, focus would be maintained internally\nby components that show models. The FocusedContentStore makes the concept of\nselection public so that you can observe focus changes and trigger your own changes\nto focus.\n\nSince {FocusedContentStore} is a Flux-compatible Store, you do not call setters\non it directly. Instead, use {Actions::setFocus} or\n{Actions::setCursorPosition} to set focus. The FocusedContentStore observes\nthese models, changes it's state, and broadcasts to it's observers.\n\nNote: The {FocusedContentStore} triggers when a focused model is changed, even if\nit's ID has not. For example, if the user has a {Thread} selected and removes a tag,\n{FocusedContentStore} will trigger so you can fetch the new version of the\n{Thread}. If you observe the {FocusedContentStore} properly, you should always\nhave the latest version of the the selected object.\n\n**Standard Collections**:\n\n* thread\n* file\n\n**Example: Observing the Selected Thread**\n\n```coffeescript\n@unsubscribe = FocusedContentStore.listen(@_onFocusChanged, @)\n\n...\n\n# Called when focus has changed, or when the focused model has been modified.\n_onFocusChanged: ->\n  thread = FocusedContentStore.focused('thread')\n  if thread\n    console.log(\"#{thread.subject} is selected!\")\n  else\n    console.log(\"No thread is selected!\")\n```\n\nSection: Stores"
    },
    "Folder": {
      "name": "Folder",
      "superClass": "Category",
      "filename": "src/flux/models/folder.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/folder.coffee#L42",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Folder model represents a Nylas Folder object. For more\ninformation about Folder on the Nylas Platform, read the [Folder API\nDocumentation](https://nylas.com/docs/api#folders)",
      "description": "The Folder model represents a Nylas Folder object. For more\ninformation about Folder on the Nylas Platform, read the [Folder API\nDocumentation](https://nylas.com/docs/api#folders)\n\nNOTE: This is different from a `Label`. A `Folder` is used for generic\nIMAP and Exchange, while `Label`s are used for Gmail. The `Account` has\nthe filed `organizationUnit` which specifies if the current account uses\neither \"folder\" or \"label\".\n\nWhile the two appear fairly similar, they have different behavioral\nsemantics and are treated separately.\n\nNylas also exposes a set of standard types or categories of folders/\nlabels: an extended version of [rfc-6154]\n(http://tools.ietf.org/html/rfc6154), returned as the name of the folder/\nlabel:\n\n* inbox\n* all\n* trash\n* archive\n* drafts\n* sent\n* spam\n* important\n\nNOTE: \"starred\" and \"unread\" are no longer folder nor labels. They are now\nboolean values on messages and threads.\n\n## Attributes\n\n`name`: {AttributeString} The internal name of the folder. Queryable.\n\n`displayName`: {AttributeString} The display-friendly name of the folder. Queryable.\n\nSection: Models"
    },
    "InjectedComponent": {
      "name": "InjectedComponent",
      "superClass": "React",
      "filename": "injected-component.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by InjectedComponent:",
          "description": "React `props` supported by InjectedComponent:",
          "arguments": [
            {
              "name": "matching",
              "description": "Pass an {Object} with ComponentRegistry descriptors.  This set of descriptors is provided to {ComponentRegistry::findComponentsForDescriptor}  to retrieve the component that will be displayed.",
              "type": "Object",
              "isOptional": false
            },
            {
              "name": "className",
              "description": "A {String} class name for the containing element.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "exposedProps",
              "description": "An {Object} with props that will be passed to each  item rendered into the set.",
              "type": "Object",
              "isOptional": true
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "InjectedComponent makes it easy to include dynamically registered\ncomponents inside of your React render method. Rather than explicitly render\na component, such as a `<Composer>`, you can use InjectedComponent:",
      "description": "InjectedComponent makes it easy to include dynamically registered\ncomponents inside of your React render method. Rather than explicitly render\na component, such as a `<Composer>`, you can use InjectedComponent:\n\n```coffee\n<InjectedComponent matching={role:\"Composer\"} exposedProps={draftClientId:123} />\n```\n\nInjectedComponent will look up the component registered with that role in the\n{ComponentRegistry} and render it, passing the exposedProps (`draftClientId={123}`) along.\n\nInjectedComponent monitors the ComponentRegistry for changes. If a new component\nis registered that matches the descriptor you provide, InjectedComponent will refresh.\n\nIf no matching component is found, the InjectedComponent renders an empty div.\n\nSection: Component Kit"
    },
    "InjectedComponentSet": {
      "name": "InjectedComponentSet",
      "superClass": "React",
      "filename": "injected-component-set.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by InjectedComponentSet:",
          "description": "React `props` supported by InjectedComponentSet:",
          "arguments": [
            {
              "name": "matching",
              "description": "Pass an {Object} with ComponentRegistry descriptors  This set of descriptors is provided to {ComponentRegistry::findComponentsForDescriptor}  to retrieve components for display.",
              "type": "Object",
              "isOptional": false
            },
            {
              "name": "className",
              "description": "A {String} class name for the containing element.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "children",
              "description": "Any React elements rendered inside the InjectedComponentSet  will always be displayed.",
              "type": null,
              "isOptional": true
            },
            {
              "name": "exposedProps",
              "description": "An {Object} with props that will be passed to each  item rendered into the set.",
              "type": "Object",
              "isOptional": true
            },
            {
              "name": "containersRequired",
              "description": ". Pass false to optionally remove the containers  placed around injected components to isolate them from the rest of the app.",
              "type": null,
              "isOptional": true
            },
            {
              "name": null,
              "description": "Any other props you provide, such as `direction`, `data-column`, etc. will be applied to the {Flexbox} rendered by the InjectedComponentSet.",
              "type": null
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "InjectedComponent makes it easy to include a set of dynamically registered\ncomponents inside of your React render method. Rather than explicitly render\nan array of buttons, for example, you can use InjectedComponentSet:",
      "description": "InjectedComponent makes it easy to include a set of dynamically registered\ncomponents inside of your React render method. Rather than explicitly render\nan array of buttons, for example, you can use InjectedComponentSet:\n\n```coffee\n<InjectedComponentSet className=\"message-actions\"\n                  matching={role: 'ThreadActionButton'}\n                  exposedProps={thread:@props.thread, message:@props.message}>\n```\n\nInjectedComponentSet will look up components registered for the location you provide,\nrender them inside a {Flexbox} and pass them `exposedProps`. By default, all injected\nchildren are rendered inside {UnsafeComponent} wrappers to prevent third-party code\nfrom throwing exceptions that break React renders.\n\nInjectedComponentSet monitors the ComponentRegistry for changes. If a new component\nis registered into the location you provide, InjectedComponentSet will re-render.\n\nIf no matching components is found, the InjectedComponent renders an empty span.\n\nSection: Component Kit"
    },
    "Label": {
      "name": "Label",
      "superClass": "Category",
      "filename": "src/flux/models/label.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/label.coffee#L42",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Label model represents a Nylas Label object. For more\ninformation about Label on the Nylas Platform, read the [Label API\nDocumentation](https://nylas.com/docs/api#folders)",
      "description": "The Label model represents a Nylas Label object. For more\ninformation about Label on the Nylas Platform, read the [Label API\nDocumentation](https://nylas.com/docs/api#folders)\n\nNOTE: This is different from a `Folder`. A `Folder` is used for generic\nIMAP and Exchange, while `Label`s are used for Gmail. The `Account` has\nthe filed `organizationUnit` which specifies if the current account uses\neither \"folder\" or \"label\".\n\nWhile the two appear fairly similar, they have different behavioral\nsemantics and are treated separately.\n\nNylas also exposes a set of standard types or categories of folders/\nlabels: an extended version of [rfc-6154]\n(http://tools.ietf.org/html/rfc6154), returned as the name of the folder/\nlabel:\n\n* inbox\n* all\n* trash\n* archive\n* drafts\n* sent\n* spam\n* important\n\nNOTE: \"starred\" and \"unread\" are no longer folder nor labels. They are now\nboolean values on messages and threads.\n\n## Attributes\n\n`name`: {AttributeString} The internal name of the label. Queryable.\n\n`displayName`: {AttributeString} The display-friendly name of the label. Queryable.\n\nSection: Models"
    },
    "Matcher": {
      "name": "Matcher",
      "filename": "src/flux/attributes/matcher.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/matcher.coffee#L36",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Matcher class encapsulates a particular comparison clause on an {Attribute}.\nMatchers can evaluate whether or not an object matches them, and also compose\nSQL clauses for the DatabaseStore. Each matcher has a reference to a model\nattribute, a comparator and a value.",
      "description": "The Matcher class encapsulates a particular comparison clause on an {Attribute}.\nMatchers can evaluate whether or not an object matches them, and also compose\nSQL clauses for the DatabaseStore. Each matcher has a reference to a model\nattribute, a comparator and a value.\n\n```coffee\n\n# Retrieving Matchers\n\nisUnread = Thread.attributes.unread.equal(true)\n\nhasLabel = Thread.attributes.lables.contains('label-id-123')\n\n# Using Matchers in Database Queries\n\nDatabaseStore.findAll(Thread).where(isUnread)...\n\n# Using Matchers to test Models\n\nthreadA = new Thread(unread: true)\nthreadB = new Thread(unread: false)\n\nisUnread.evaluate(threadA)\n# => true\nisUnread.evaluate(threadB)\n# => false\n```\n\nSection: Database"
    },
    "Menu": {
      "name": "Menu",
      "superClass": "React",
      "filename": "menu.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "getSelectedItem",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the currently selected item."
            }
          ]
        },
        {
          "name": "setSelectedItem",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "Set the currently selected item. Pass\nnull to remove the selection",
          "description": "Set the currently selected item. Pass\nnull to remove the selection"
        }
      ],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by Menu:",
          "description": "React `props` supported by Menu:",
          "arguments": [
            {
              "name": "className",
              "description": "The {String} class name applied to the Menu",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "itemContent",
              "description": "A {Function} that returns a {MenuItem}, {String}, or React component for the given `item`. If you return a {MenuItem}, your item is injected into the list directly. If you return a string or React component, the result is placed within a {MenuItem}, resulting in the following DOM: `<div className=\"item [selected]\">{your content}</div>`. To create dividers and other special menu items, return an instance of:",
              "type": "Function",
              "isOptional": false
            },
            {
              "name": "itemKey",
              "description": "A {Function} that returns a unique string key for the given `item`. Keys are important for efficient React rendering when `items` is changed, and a key function is required.",
              "type": "Function",
              "isOptional": false
            },
            {
              "name": "itemChecked",
              "description": "A {Function} that returns true if the given item should be shown with a checkmark. If you don't provide an implementation for `itemChecked`, no checkmarks are ever shown.",
              "type": "Function",
              "isOptional": false
            },
            {
              "name": "items",
              "description": "An {Array} of arbitrary objects the menu should display.",
              "type": "Array",
              "isOptional": false
            },
            {
              "name": "onSelect",
              "description": "A {Function} called with the selected item when the user clicks an item in the menu or confirms their selection with the Enter key.",
              "type": "Function",
              "isOptional": false
            },
            {
              "name": "defaultSelectedIndex",
              "description": "The index of the item first selected if there was no other previous index. Defaults to 0. Set to -1 if you want nothing selected.",
              "type": null,
              "isOptional": false
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "React component for multi-section Menus with key binding",
      "description": "React component for multi-section Menus with key binding\n\nThe Menu component allows you to display a list of items. Menu takes care of\nseveral important things, ensuring that your menu is consistent with the rest\nof the N1 application and offers a near-native experience:\n\n* Keyboard Interaction with the Up and Down arrow keys, Enter to select\n* Maintaining selection across content changes\n* Highlighted state\n\nMenus are often, but not always, used in conjunction with {Popover} to display\na floating \"popup\" menu. See `template-picker.cjsx` for an example.\n\nThe Menu also exposes \"header\" and \"footer\" regions you can fill with arbitrary\ncomponents by providing the `headerComponents` and `footerComponents` props.\nThese items are nested within `.header-container`. and `.footer-container`,\nand you can customize their appearance by providing CSS selectors scoped to your\ncomponent's Menu instance:\n\n```css\n.template-picker .menu .header-container {\n  height: 100px;\n}\n```\n\nSection: Component Kit"
    },
    "MenuItem": {
      "name": "MenuItem",
      "superClass": "React",
      "filename": "menu.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by MenuItem:",
          "description": "React `props` supported by MenuItem:",
          "arguments": [
            {
              "name": "divider",
              "description": "Pass a {Boolean} to render the menu item as a section divider.",
              "type": "Boolean",
              "isOptional": true
            },
            {
              "name": "key",
              "description": "Pass a {String} to be the React key to optimize rendering lists of items.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "selected",
              "description": "Pass a {Boolean} to specify whether the item is selected.",
              "type": "Boolean",
              "isOptional": true
            },
            {
              "name": "checked",
              "description": "Pass a {Boolean} to specify whether the item is checked.",
              "type": "Boolean",
              "isOptional": true
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "`MenuItem` components can be provided to the {Menu} by the `itemContent` function.\nMenuItem's props allow you to display dividers as well as standard items.",
      "description": "`MenuItem` components can be provided to the {Menu} by the `itemContent` function.\nMenuItem's props allow you to display dividers as well as standard items.\n\nSection: Component Kit"
    },
    "MenuManager": {
      "name": "MenuManager",
      "filename": "src/menu-manager.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/menu-manager.coffee#L62",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "add",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/menu-manager.coffee#L89",
          "visibility": "Public",
          "summary": "Adds the given items to the application menu.",
          "description": "Adds the given items to the application menu.",
          "arguments": [
            {
              "children": [
                {
                  "name": "label",
                  "description": "The {String} menu label.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "submenu",
                  "description": "An optional {Array} of sub menu items.",
                  "type": "Array",
                  "isOptional": false
                },
                {
                  "name": "command",
                  "description": "An optional {String} command to trigger when the item is clicked.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "items",
              "description": "An {Array} of menu item {Object}s containing the keys:",
              "type": "Array",
              "isOptional": false
            }
          ],
          "examples": [
            {
              "description": "",
              "lang": "coffee",
              "code": "  atom.menu.add [\n    {\n      label: 'Hello'\n      submenu : [{label: 'World!', command: 'hello:world'}]\n    }\n  ]",
              "raw": "```coffee\n  atom.menu.add [\n    {\n      label: 'Hello'\n      submenu : [{label: 'World!', command: 'hello:world'}]\n    }\n  ]\n```"
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to remove the\nadded menu items."
            }
          ]
        },
        {
          "name": "update",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/menu-manager.coffee#L137",
          "visibility": "Public",
          "summary": "Refreshes the currently visible menu. ",
          "description": "Refreshes the currently visible menu. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Provides a registry for menu items that you'd like to appear in the\napplication menu.",
      "description": "Provides a registry for menu items that you'd like to appear in the\napplication menu.\n\nAn instance of this class is always available as the `atom.menu` global.\n\n## Menu CSON Format\n\nHere is an example from the [tree-view](https://github.com/atom/tree-view/blob/master/menus/tree-view.cson):\n\n```coffee\n[\n  {\n    'label': 'View'\n    'submenu': [\n      { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' }\n    ]\n  }\n  {\n    'label': 'Packages'\n    'submenu': [\n      'label': 'Tree View'\n      'submenu': [\n        { 'label': 'Focus', 'command': 'tree-view:toggle-focus' }\n        { 'label': 'Toggle', 'command': 'tree-view:toggle' }\n        { 'label': 'Reveal Active File', 'command': 'tree-view:reveal-active-file' }\n        { 'label': 'Toggle Tree Side', 'command': 'tree-view:toggle-side' }\n      ]\n    ]\n  }\n]\n```\n\nUse in your package's menu `.cson` file requires that you place your menu\nstructure under a `menu` key.\n\n```coffee\n'menu': [\n  {\n    'label': 'View'\n    'submenu': [\n      { 'label': 'Toggle Tree View', 'command': 'tree-view:toggle' }\n    ]\n  }\n]\n```\n\nSee {::add} for more info about adding menu's directly.\n\nSection: Atom "
    },
    "MenuNameEmailItem": {
      "name": "MenuNameEmailItem",
      "superClass": "React",
      "filename": "menu.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by MenuNameEmailItem:",
          "description": "React `props` supported by MenuNameEmailItem:",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} name to be displayed.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "email",
              "description": "The {String} email address to be displayed.",
              "type": "String",
              "isOptional": true
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "React component for a {Menu} item that displays a name and email address.",
      "description": "React component for a {Menu} item that displays a name and email address.\n\nSection: Component Kit"
    },
    "Message": {
      "name": "Message",
      "superClass": "Model",
      "filename": "src/flux/models/message.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L70",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "participants",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L206",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a set of uniqued message participants by combining the\n`to`, `cc`, and `from` fields."
            }
          ]
        },
        {
          "name": "participantsForReplyAll",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L217",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a hash with `to` and `cc` keys for authoring a new draft in\n\"reply all\" to this message. This method takes into account whether the\nmessage is from the current user, and also looks at the replyTo field."
            }
          ]
        },
        {
          "name": "participantsForReply",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L247",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a hash with `to` and `cc` keys for authoring a new draft in\n\"reply\" to this message. This method takes into account whether the\nmessage is from the current user, and also looks at the replyTo field."
            }
          ]
        },
        {
          "name": "fileIds",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L262",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {File} IDs"
            }
          ]
        },
        {
          "name": "isFromMe",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L268",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if this message is from the current user's email\naddress. In the future, this method will take into account all of the\nuser's email addresses and accounts."
            }
          ]
        },
        {
          "name": "plainTextBody",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L273",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a plaintext version of the message body using Chromium's\nDOMParser. Use with care."
            }
          ]
        },
        {
          "name": "replyAttributionLine",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/message.coffee#L283",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns the standard attribution line for this message,\nlocalized for the current user.\nie \"On Dec. 12th, 2015 at 4:00PM, Ben Gotow wrote:\""
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Message model represents a Message object served by the Nylas Platform API.\nFor more information about Messages on the Nylas Platform, read the\n[Messages API Documentation](https://nylas.com/docs/api#messages)",
      "description": "The Message model represents a Message object served by the Nylas Platform API.\nFor more information about Messages on the Nylas Platform, read the\n[Messages API Documentation](https://nylas.com/docs/api#messages)\n\nMessages are a sub-object of threads. The content of a message is immutable (with the\nexception being drafts). Nylas does not support operations such as move or delete on\nindividual messages; those operations should be performed on the message’s thread.\nAll messages are part of a thread, even if that thread has only one message.\n\n## Attributes\n\n`to`: {AttributeCollection} A collection of {Contact} objects\n\n`cc`: {AttributeCollection} A collection of {Contact} objects\n\n`bcc`: {AttributeCollection} A collection of {Contact} objects\n\n`from`: {AttributeCollection} A collection of {Contact} objects.\n\n`replyTo`: {AttributeCollection} A collection of {Contact} objects.\n\n`date`: {AttributeDateTime} When the message was delivered. Queryable.\n\n`subject`: {AttributeString} The subject of the thread. Queryable.\n\n`snippet`: {AttributeString} A short, 140-character plain-text summary of the message body.\n\n`unread`: {AttributeBoolean} True if the message is unread. Queryable.\n\n`starred`: {AttributeBoolean} True if the message is starred. Queryable.\n\n`draft`: {AttributeBoolean} True if the message is a draft. Queryable.\n\n`version`: {AttributeNumber} The version number of the message. Message\n   versions are used for drafts, and increment when attributes are changed.\n\n`files`: {AttributeCollection} A set of {File} models representing\n   the attachments on this thread.\n\n`body`: {AttributeJoinedData} The HTML body of the message. You must specifically\n request this attribute when querying for a Message using the {{AttributeJoinedData::include}}\n method.\n\n`pristine`: {AttributeBoolean} True if the message is a draft which has not been\n edited since it was created.\n\n`threadId`: {AttributeString} The ID of the Message's parent {Thread}. Queryable.\n\n`replyToMessageId`: {AttributeString} The ID of a {Message} that this message\n is in reply to.\n\nThis class also inherits attributes from {Model}\n\nSection: Models"
    },
    "MessageStoreExtension": {
      "name": "MessageStoreExtension",
      "filename": "src/flux/stores/message-store-extension.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/message-store-extension.coffee#L26",
      "sections": [],
      "classMethods": [
        {
          "name": "formatMessageBody",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/message-store-extension.coffee#L32",
          "visibility": "Public",
          "summary": "Transform the message body HTML provided in `body` and return HTML\nthat should be displayed for the message.",
          "description": "Transform the message body HTML provided in `body` and return HTML\nthat should be displayed for the message."
        }
      ],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "MessageStoreExtension is an abstract base class. To create MessageStoreExtension\nthat customize message viewing, you should subclass {MessageStoreExtension} and\nimplement the class methods your plugin needs.",
      "description": "MessageStoreExtension is an abstract base class. To create MessageStoreExtension\nthat customize message viewing, you should subclass {MessageStoreExtension} and\nimplement the class methods your plugin needs.\n\nTo register your extension with the MessageStore, call {MessageStore::registerExtension}.\nWhen your package is being unloaded, you *must* call the corresponding\n{MessageStore::unregisterExtension} to unhook your extension.\n\n```coffee\nactivate: ->\n  MessageStore.registerExtension(MyExtension)\n\n...\n\ndeactivate: ->\n  MessageStore.unregisterExtension(MyExtension)\n```\n\nThe MessageStoreExtension API does not currently expose any asynchronous or {Promise}-based APIs.\nThis will likely change in the future. If you have a use-case for a Message Store extension that\nis not possible with the current API, please let us know.\n\nSection: Stores"
    },
    "Model": {
      "name": "Model",
      "filename": "src/flux/models/model.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/model.coffee#L32",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "attributes",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/model.coffee#L80",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Attribute} objects defined on the Model's constructor"
            }
          ]
        },
        {
          "name": "toJSON",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/model.coffee#L108",
          "visibility": "Public",
          "summary": "Deflates the model to a plain JSON object. Only attributes defined\non the model are included in the JSON.",
          "description": "Deflates the model to a plain JSON object. Only attributes defined\non the model are included in the JSON.",
          "arguments": [
            {
              "name": "options",
              "description": "An {Object} with additional options. To skip joined  data attributes in the toJSON representation, pass the `joined:false`",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Object",
              "description": "Returns an {Object} with the JSON representation of the model."
            }
          ]
        },
        {
          "name": "matches",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/model.coffee#L127",
          "visibility": "Public",
          "summary": "Evaluates the model against one or more {Matcher} objects.",
          "description": "Evaluates the model against one or more {Matcher} objects.",
          "arguments": [
            {
              "name": "criteria",
              "description": "An {Array} of {Matcher}s to run on the model.",
              "type": "Array",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns true if the model matches the criteria."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "A base class for API objects that provides abstract support for\nserialization and deserialization, matching by attributes, and ID-based equality.",
      "description": "A base class for API objects that provides abstract support for\nserialization and deserialization, matching by attributes, and ID-based equality.\n\n## Attributes\n\n`id`: {AttributeString} The resolved canonical ID of the model used in the\ndatabase and generally throughout the app. The id property is a custom\ngetter that resolves to the serverId first, and then the clientId.\n\n`clientId`: {AttributeString} An ID created at object construction and\npersists throughout the lifetime of the object. This is extremely useful\nfor optimistically creating objects (like drafts and categories) and\nhaving a constant reference to it. In all other cases, use the resolved\n`id` field.\n\n`serverId`: {AttributeServerId} The server ID of the model. In most cases,\nexcept optimistic creation, this will also be the canonical id of the\nobject.\n\n`object`: {AttributeString} The model's type. This field is used by the JSON\n deserializer to create an instance of the correct class when inflating the object.\n\n`accountId`: {AttributeString} The string Account Id this model belongs to.\n\nSection: Models"
    },
    "ModelQuery": {
      "name": "ModelQuery",
      "filename": "src/flux/models/query.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L35",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "where",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L58",
          "visibility": "Public",
          "summary": "Add one or more where clauses to the query",
          "description": "Add one or more where clauses to the query\n\nThis method is chainable.",
          "arguments": [
            {
              "name": "matchers",
              "description": "An {Array} of {Matcher} objects that add where clauses to the underlying query.",
              "type": "Array",
              "isOptional": false
            }
          ]
        },
        {
          "name": "include",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L80",
          "visibility": "Public",
          "summary": "Include specific joined data attributes in result objects.",
          "description": "Include specific joined data attributes in result objects.\n\nThis method is chainable.",
          "arguments": [
            {
              "name": "attr",
              "description": "A {AttributeJoinedData} that you want to be populated in the returned models. Note: This results in a LEFT OUTER JOIN. See {AttributeJoinedData} for more information.",
              "type": "AttributeJoinedData",
              "isOptional": false
            }
          ]
        },
        {
          "name": "includeAll",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L90",
          "visibility": "Public",
          "summary": "Include all of the available joined data attributes in returned models.",
          "description": "Include all of the available joined data attributes in returned models.\n\nThis method is chainable."
        },
        {
          "name": "order",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L101",
          "visibility": "Public",
          "summary": "Apply a sort order to the query.",
          "description": "Apply a sort order to the query.\n\nThis method is chainable.",
          "arguments": [
            {
              "name": "orders",
              "description": "An {Array} of one or more {SortOrder} objects that determine the sort order of returned models.",
              "type": "Array",
              "isOptional": false
            }
          ]
        },
        {
          "name": "one",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L111",
          "visibility": "Public",
          "summary": "Set the `singular` flag - only one model will be returned from the\nquery, and a `LIMIT 1` clause will be used.",
          "description": "Set the `singular` flag - only one model will be returned from the\nquery, and a `LIMIT 1` clause will be used.\n\nThis method is chainable."
        },
        {
          "name": "limit",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L121",
          "visibility": "Public",
          "summary": "Limit the number of query results.",
          "description": "Limit the number of query results.\n\nThis method is chainable.",
          "arguments": [
            {
              "name": "limit",
              "description": "{Number} The number of models that should be returned.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "offset",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L133",
          "visibility": "Public",
          "summary": "",
          "description": "\n\nThis method is chainable.",
          "arguments": [
            {
              "name": "offset",
              "description": "{Number} The start offset of the query.",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "count",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L143",
          "visibility": "Public",
          "summary": "Set the `count` flag - instead of returning inflated models,\nthe query will return the result `COUNT`.",
          "description": "Set the `count` flag - instead of returning inflated models,\nthe query will return the result `COUNT`.\n\nThis method is chainable."
        },
        {
          "name": "then",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L167",
          "visibility": "Public",
          "summary": "Short-hand syntax that calls run().then(fn) with the provided function.",
          "description": "Short-hand syntax that calls run().then(fn) with the provided function.",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with the Models returned by the\nquery, or rejects with an error from the Database layer."
            }
          ]
        },
        {
          "name": "run",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/query.coffee#L173",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Promise",
              "description": "Returns a {Promise} that resolves with the Models returned by the\nquery, or rejects with an error from the Database layer."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "ModelQuery exposes an ActiveRecord-style syntax for building database queries\nthat return models and model counts. Model queries are returned from the factory methods\n{DatabaseStore::find}, {DatabaseStore::findBy}, {DatabaseStore::findAll}, and {DatabaseStore::count}, and are the primary interface for retrieving data\nfrom the app's local cache.",
      "description": "ModelQuery exposes an ActiveRecord-style syntax for building database queries\nthat return models and model counts. Model queries are returned from the factory methods\n{DatabaseStore::find}, {DatabaseStore::findBy}, {DatabaseStore::findAll}, and {DatabaseStore::count}, and are the primary interface for retrieving data\nfrom the app's local cache.\n\nModelQuery does not allow you to modify the local cache. To create, update or\ndelete items from the local cache, see {DatabaseStore::persistModel}\nand {DatabaseStore::unpersistModel}.\n\n**Simple Example:** Fetch a thread\n\n```coffee\nquery = DatabaseStore.find(Thread, '123a2sc1ef4131')\nquery.then (thread) ->\n  # thread or null\n```\n\n**Advanced Example:** Fetch 50 threads in the inbox, in descending order\n\n```coffee\nquery = DatabaseStore.findAll(Thread)\nquery.where([Thread.attributes.labels.contains('label-id')])\n     .order([Thread.attributes.lastMessageReceivedTimestamp.descending()])\n     .limit(100).offset(50)\n     .then (threads) ->\n  # array of threads\n```\n\nSection: Database"
    },
    "MultiselectActionBar": {
      "name": "MultiselectActionBar",
      "superClass": "React",
      "filename": "multiselect-action-bar.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by MultiselectActionBar:",
          "description": "React `props` supported by MultiselectActionBar:",
          "arguments": [
            {
              "name": "dataStore",
              "description": "An instance of a {ModelView}.",
              "type": "ModelView",
              "isOptional": false
            },
            {
              "name": "collection",
              "description": "The name of the collection. The collection name is used for the text  that appears in the bar \"1 thread selected\" and is also used to find components  in the component registry that should appear in the bar (`thread` => `thread:BulkAtion`)",
              "type": null,
              "isOptional": false
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "MultiselectActionBar is a simple component that can be placed in a {Sheet} Toolbar.\nWhen the provided `dataStore` has a selection, it appears over the other items in the toolbar.",
      "description": "MultiselectActionBar is a simple component that can be placed in a {Sheet} Toolbar.\nWhen the provided `dataStore` has a selection, it appears over the other items in the toolbar.\n\nGenerally, you wrap {MultiselectActionBar} in your own simple component to provide a dataStore\nand other settings:\n\n```coffee\nclass MultiselectActionBar extends React.Component\n  @displayName: 'MultiselectActionBar'\n\n  render: =>\n    <MultiselectActionBar\n      dataStore={ThreadListStore}\n      className=\"thread-list\"\n      collection=\"thread\" />\n```\n\nThe MultiselectActionBar uses the `ComponentRegistry` to find items to display for the given\ncollection name. To add an item to the bar created in the example above, register it like this:\n\n```coffee\nComponentRegistry.register ThreadBulkRemoveButton,\n  role: 'thread:BulkAction'\n```\n\nSection: Component Kit"
    },
    "MultiselectList": {
      "name": "MultiselectList",
      "superClass": "React",
      "filename": "multiselect-list.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "MultiselectList wraps {ListTabular} and makes it easy to present a\n{ModelView} with selection support. It adds a checkbox column to the columns\nyou provide, and also handles:",
      "description": "MultiselectList wraps {ListTabular} and makes it easy to present a\n{ModelView} with selection support. It adds a checkbox column to the columns\nyou provide, and also handles:\n\n* Command-clicking individual items\n* Shift-clicking to select a range\n* Using the keyboard to select a range\n\nSection: Component Kit"
    },
    "PackageManager": {
      "name": "PackageManager",
      "filename": "src/package-manager.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L34",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Package system data",
          "description": ""
        },
        {
          "name": "General package data",
          "description": ""
        },
        {
          "name": "Enabling and disabling packages",
          "description": ""
        },
        {
          "name": "Accessing active packages",
          "description": ""
        },
        {
          "name": "Accessing loaded packages",
          "description": ""
        },
        {
          "name": "Accessing available packages",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidLoadInitialPackages",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L67",
          "visibility": "Public",
          "summary": "Invoke the given callback when all packages have been loaded.",
          "description": "Invoke the given callback when all packages have been loaded.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidActivateInitialPackages",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L80",
          "visibility": "Public",
          "summary": "Invoke the given callback when all packages have been activated.",
          "description": "Invoke the given callback when all packages have been activated.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function}",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidActivatePackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L94",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is activated.",
          "description": "Invoke the given callback when a package is activated.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was activated.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is activated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDeactivatePackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L103",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is deactivated.",
          "description": "Invoke the given callback when a package is deactivated.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was deactivated.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is deactivated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidLoadPackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L112",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is loaded.",
          "description": "Invoke the given callback when a package is loaded.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was loaded.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is loaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidUnloadPackage",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L121",
          "visibility": "Public",
          "summary": "Invoke the given callback when a package is unloaded.",
          "description": "Invoke the given callback when a package is unloaded.",
          "arguments": [
            {
              "children": [
                {
                  "name": "package",
                  "description": "The {Package} that was unloaded.",
                  "type": "Package",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "A {Function} to be invoked when a package is unloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getApmPath",
          "sectionName": "Package system data",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L141",
          "visibility": "Public",
          "summary": "Get the path to the apm command.",
          "description": "Get the path to the apm command.\n\nReturn a {String} file path to apm. "
        },
        {
          "name": "getPackageDirPaths",
          "sectionName": "Package system data",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L157",
          "visibility": "Public",
          "summary": "Get the paths being used to look for packages.",
          "description": "Get the paths being used to look for packages.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String} directory paths."
            }
          ]
        },
        {
          "name": "resolvePackagePath",
          "sectionName": "General package data",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L169",
          "visibility": "Public",
          "summary": "Resolve the given package name to a path on disk.",
          "description": "Resolve the given package name to a path on disk.\n\nReturn a {String} folder path or undefined if it could not be resolved. ",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "isBundledPackage",
          "sectionName": "General package data",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L183",
          "visibility": "Public",
          "summary": "Is the package with the given name bundled with Atom?",
          "description": "Is the package with the given name bundled with Atom?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "enablePackage",
          "sectionName": "Enabling and disabling packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L193",
          "visibility": "Public",
          "summary": "Enable the package with the given name.",
          "description": "Enable the package with the given name.",
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns the {Package} that was enabled or null if it isn't loaded."
            }
          ]
        },
        {
          "name": "disablePackage",
          "sectionName": "Enabling and disabling packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L201",
          "visibility": "Public",
          "summary": "Disable the package with the given name.",
          "description": "Disable the package with the given name.",
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns the {Package} that was disabled or null if it isn't loaded."
            }
          ]
        },
        {
          "name": "isPackageDisabled",
          "sectionName": "Enabling and disabling packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L211",
          "visibility": "Public",
          "summary": "Is the package with the given name disabled?",
          "description": "Is the package with the given name disabled?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getActivePackages",
          "sectionName": "Accessing active packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L219",
          "visibility": "Public",
          "summary": "Get an {Array} of all the active {Package}s. ",
          "description": "Get an {Array} of all the active {Package}s. "
        },
        {
          "name": "getActivePackage",
          "sectionName": "Accessing active packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L227",
          "visibility": "Public",
          "summary": "Get the active {Package} with the given name.",
          "description": "Get the active {Package} with the given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns a {Package} or ."
            }
          ]
        },
        {
          "name": "isPackageActive",
          "sectionName": "Accessing active packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L235",
          "visibility": "Public",
          "summary": "Is the {Package} with the given name active?",
          "description": "Is the {Package} with the given name active?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getLoadedPackages",
          "sectionName": "Accessing loaded packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L243",
          "visibility": "Public",
          "summary": "Get an {Array} of all the loaded {Package}s ",
          "description": "Get an {Array} of all the loaded {Package}s "
        },
        {
          "name": "getLoadedPackage",
          "sectionName": "Accessing loaded packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L257",
          "visibility": "Public",
          "summary": "Get the loaded {Package} with the given name.",
          "description": "Get the loaded {Package} with the given name.",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Package",
              "description": "Returns a {Package} or ."
            }
          ]
        },
        {
          "name": "isPackageLoaded",
          "sectionName": "Accessing loaded packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L265",
          "visibility": "Public",
          "summary": "Is the package with the given name loaded?",
          "description": "Is the package with the given name loaded?",
          "arguments": [
            {
              "name": "name",
              "description": "The {String} package name.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getAvailablePackagePaths",
          "sectionName": "Accessing available packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L276",
          "visibility": "Public",
          "summary": "Get an {Array} of {String}s of all the available package paths.",
          "description": "Get an {Array} of {String}s of all the available package paths.\n\nIf the optional windowType is passed, it will only load packages\nthat declare that windowType in their package.json "
        },
        {
          "name": "getAvailablePackageNames",
          "sectionName": "Accessing available packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L309",
          "visibility": "Public",
          "summary": "Get an {Array} of {String}s of all the available package names. ",
          "description": "Get an {Array} of {String}s of all the available package names. "
        },
        {
          "name": "getAvailablePackageMetadata",
          "sectionName": "Accessing available packages",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/package-manager.coffee#L313",
          "visibility": "Public",
          "summary": "Get an {Array} of {String}s of all the available package metadata. ",
          "description": "Get an {Array} of {String}s of all the available package metadata. "
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Package manager for coordinating the lifecycle of Atom packages.",
      "description": "Package manager for coordinating the lifecycle of Atom packages.\n\nAn instance of this class is always available as the `atom.packages` global.\n\nPackages can be loaded, activated, and deactivated, and unloaded:\n\n* Loading a package reads and parses the package's metadata and resources\n  such as keymaps, menus, stylesheets, etc.\n* Activating a package registers the loaded resources and calls `activate()`\n  on the package's main module.\n* Deactivating a package unregisters the package's resources  and calls\n  `deactivate()` on the package's main module.\n* Unloading a package removes it completely from the package manager.\n\nPackages can be enabled/disabled via the `core.disabledPackages` config\nsettings and also by calling `enablePackage()/disablePackage()`.\n\nSection: Atom "
    },
    "Popover": {
      "name": "Popover",
      "superClass": "React",
      "filename": "popover.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Popover component makes it easy to display a sheet or popup menu when the\nuser clicks the React element provided as `buttonComponent`. In N1, the Popover\ncomponent is used to create rich dropdown menus, detail popups, etc. with consistent\nlook and feel and behavior.",
      "description": "The Popover component makes it easy to display a sheet or popup menu when the\nuser clicks the React element provided as `buttonComponent`. In N1, the Popover\ncomponent is used to create rich dropdown menus, detail popups, etc. with consistent\nlook and feel and behavior.\n\nThe Popover component handles:\n\n* Rendering it's children when you click `buttonComponent`, and dismissing it's\n  children when you click outside the popover or press the Escape key.\n* Automatically focusing the item with the lowest tabIndex inside the popover\n\n## Input Focus\n\nIf your Popover contains an input, like a search bar, give it a tabIndex and\nPopover will automatically focus it when the popover is opened.\n\n## Advanced Use\n\nIf you don't want to use the Popover in conjunction with a triggering button,\nyou can manually call `open()` and `close()` to display it. A typical scenario\nlooks like this:\n\n```coffeescript\nrender: =>\n  <Popover ref=\"myPopover\"> Popover Contents </Popover>\n\nshowMyPopover: =>\n  @refs.myPopover.open()\n```\n\nSection: Component Kit"
    },
    "ResizableRegion": {
      "name": "ResizableRegion",
      "superClass": "React",
      "filename": "resizable-region.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "ResizableRegion wraps it's `children` in a div with a fixed width or height, and a\ndraggable edge. It is used throughout N1 to implement resizable columns, trays, etc.",
      "description": "ResizableRegion wraps it's `children` in a div with a fixed width or height, and a\ndraggable edge. It is used throughout N1 to implement resizable columns, trays, etc.\n\nSection: Component Kit"
    },
    "RetinaImg": {
      "name": "RetinaImg",
      "superClass": "React",
      "filename": "retina-img.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by RetinaImg:",
          "description": "React `props` supported by RetinaImg:",
          "arguments": [
            {
              "name": "mode",
              "description": "(required) One of the RetinaImg.Mode constants. See above for details.",
              "type": null,
              "isOptional": false
            },
            {
              "name": "name",
              "description": "A {String} image name to display.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "url",
              "description": "A {String} url of an image to display.  May be an http, https, or `nylas://<packagename>/<path within package>` URL.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "fallback",
              "description": "A {String} image name to use when `name` cannot be found.",
              "type": "String",
              "isOptional": true
            },
            {
              "name": "selected",
              "description": "Appends \"-selected\" to the end of the image name when when true",
              "type": null,
              "isOptional": true
            },
            {
              "name": "active",
              "description": "Appends \"-active\" to the end of the image name when when true",
              "type": null,
              "isOptional": true
            },
            {
              "name": "style",
              "description": "An {Object} with additional styles to apply to the image.",
              "type": "Object",
              "isOptional": true
            },
            {
              "name": "resourcePath",
              "description": "(options) Changes the default lookup location used to find the images.",
              "type": null,
              "isOptional": false
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "RetinaImg wraps the DOM's standard `<img`> tag and implements a `UIImage` style\ninterface. Rather than specifying an image `src`, RetinaImg allows you to provide\nan image name. Like UIImage on iOS, it automatically finds the best image for the current\ndisplay based on pixel density. Given `image.png`, on a Retina screen, it looks for\n`image@2x.png`, `image.png`, `image@1x.png` in that order. It uses a lookup table and caches\nimage names, so images generally resolve immediately.",
      "description": "RetinaImg wraps the DOM's standard `<img`> tag and implements a `UIImage` style\ninterface. Rather than specifying an image `src`, RetinaImg allows you to provide\nan image name. Like UIImage on iOS, it automatically finds the best image for the current\ndisplay based on pixel density. Given `image.png`, on a Retina screen, it looks for\n`image@2x.png`, `image.png`, `image@1x.png` in that order. It uses a lookup table and caches\nimage names, so images generally resolve immediately.\n\nRetinaImg also introduces the concept of image `modes`. Specifying an image mode\nis important for theming: it describes the content of your image, allowing theme\ndevelopers to properly adjust it. The four modes are described below:\n\n* ContentPreserve: Your image contains color or should not be adjusted by any theme.\n* ContentLight: Your image is a grayscale image with light colors, intended to be shown\n  against a dark background. If a theme developer changes the background to be light, they\n  can safely apply CSS filters to invert or darken this image. This mode adds the\n  `content-light` CSS class to the image.\n* ContentDark: Your image is a grayscale image with dark colors, intended to be shown\n  against a light background. If a theme developer changes the background to be dark, they\n  can safely apply CSS filters to invert or brighten this image. This mode adds the\n  `content-dark` CSS class to the image.\n* ContentIsMask: This image provides alpha information only, and color should\n  be based on the `background-color` of the RetinaImg. This mode adds the\n  `content-mask` CSS class to the image, and leverages `-webkit-mask-image`.\n  Example: Icons displayed within buttons specify ContentIsMask, and their\n  color is declared via CSS to be the same as the button text color. Changing\n  `@text-color-subtle` in a theme changes both button text and button icons!\n  ```css\n   .btn-icon {\n     color: @text-color-subtle;\n     img.content-mask { background-color:@text-color-subtle; }\n   }\n  ```\n\nSection: Component Kit"
    },
    "ScopeDescriptor": {
      "name": "ScopeDescriptor",
      "filename": "src/scope-descriptor.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/scope-descriptor.coffee#L23",
      "sections": [
        {
          "name": "Construction and Destruction",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/scope-descriptor.coffee#L38",
          "visibility": "Public",
          "summary": "Create a {ScopeDescriptor} object.",
          "description": "Create a {ScopeDescriptor} object.",
          "arguments": [
            {
              "children": [
                {
                  "name": "scopes",
                  "description": "{Array} of {String}s ",
                  "type": "Array",
                  "isOptional": false
                }
              ],
              "name": "object",
              "description": "{Object}",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getScopesArray",
          "sectionName": "Construction and Destruction",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/scope-descriptor.coffee#L41",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Wraps an {Array} of `String`s. The Array describes a path from the\nroot of the syntax tree to a token including _all_ scope names for the entire\npath.",
      "description": "Wraps an {Array} of `String`s. The Array describes a path from the\nroot of the syntax tree to a token including _all_ scope names for the entire\npath.\n\nMethods that take a `ScopeDescriptor` will also accept an {Array} of {Strings}\nscope names e.g. `['.source.js']`.\n\nYou can use `ScopeDescriptor`s to get language-specific config settings via\n{Config::get}.\n\nYou should not need to create a `ScopeDescriptor` directly.\n\n* {Editor::getRootScopeDescriptor} to get the language's descriptor.\n* {Editor::scopeDescriptorForBufferPosition} to get the descriptor at a\n  specific position in the buffer.\n* {Cursor::getScopeDescriptor} to get a cursor's descriptor based on position.\n\nSee the [scopes and scope descriptor guide](https://atom.io/docs/v0.138.0/advanced/scopes-and-scope-descriptors)\nfor more information.\n\nSection: Atom "
    },
    "SortOrder": {
      "name": "SortOrder",
      "filename": "src/flux/attributes/sort-order.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/attributes/sort-order.coffee#L15",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Represents a particular sort direction on a particular column. You should not\ninstantiate SortOrders manually. Instead, call {Attribute::ascending} or\n{Attribute::descending} to obtain a sort order instance:",
      "description": "Represents a particular sort direction on a particular column. You should not\ninstantiate SortOrders manually. Instead, call {Attribute::ascending} or\n{Attribute::descending} to obtain a sort order instance:\n\n```coffee\nDatabaseStore.findBy(Message)\n  .where({threadId: threadId, draft: false})\n  .order(Message.attributes.date.descending()).then (messages) ->\n```\n\nSection: Database"
    },
    "Spinner": {
      "name": "Spinner",
      "superClass": "React",
      "filename": "spinner.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Displays an indeterminate progress indicator in the center of it's\nparent component.",
      "description": "Displays an indeterminate progress indicator in the center of it's\nparent component.\n\nSection: Component Kit"
    },
    "StyleManager": {
      "name": "StyleManager",
      "filename": "src/style-manager.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/style-manager.coffee#L13",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Reading Style Elements",
          "description": ""
        },
        {
          "name": "Paths",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "observeStyleElements",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/style-manager.coffee#L38",
          "visibility": "Extended",
          "summary": "Invoke `callback` for all current and future style elements.",
          "description": "Invoke `callback` for all current and future style elements.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "sourcePath",
                      "description": "A {String} containing the path from which the style element was loaded.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "context",
                      "description": "A {String} indicating the target context of the style element.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance. The `.sheet` property will be null because this element isn't attached to the DOM. If you want to attach this element to the DOM, be sure to clone it first by calling `.cloneNode(true)` on it. The style element will also have the following non-standard properties:",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "onDidAddStyleElement",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/style-manager.coffee#L57",
          "visibility": "Extended",
          "summary": "Invoke `callback` when a style element is added.",
          "description": "Invoke `callback` when a style element is added.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "sourcePath",
                      "description": "A {String} containing the path from which the style element was loaded.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "context",
                      "description": "A {String} indicating the target context of the style element.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance. The `.sheet` property will be null because this element isn't attached to the DOM. If you want to attach this element to the DOM, be sure to clone it first by calling `.cloneNode(true)` on it. The style element will also have the following non-standard properties:",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "onDidRemoveStyleElement",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/style-manager.coffee#L67",
          "visibility": "Extended",
          "summary": "Invoke `callback` when a style element is removed.",
          "description": "Invoke `callback` when a style element is removed.",
          "arguments": [
            {
              "children": [
                {
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance.",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "onDidUpdateStyleElement",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/style-manager.coffee#L83",
          "visibility": "Extended",
          "summary": "Invoke `callback` when an existing style element is updated.",
          "description": "Invoke `callback` when an existing style element is updated.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "sourcePath",
                      "description": "A {String} containing the path from which the style element was loaded.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "context",
                      "description": "A {String} indicating the target context of the style element.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "styleElement",
                  "description": "An `HTMLStyleElement` instance. The `.sheet` property  will be null because this element isn't attached to the DOM. The style  element will also have the following non-standard properties:",
                  "type": null,
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} that is called with style elements.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to cancel the\nsubscription."
            }
          ]
        },
        {
          "name": "getStyleElements",
          "sectionName": "Reading Style Elements",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/style-manager.coffee#L91",
          "visibility": "Extended",
          "summary": "Get all loaded style elements. ",
          "description": "Get all loaded style elements. "
        },
        {
          "name": "getUserStyleSheetPath",
          "sectionName": "Paths",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/style-manager.coffee#L164",
          "visibility": "Extended",
          "summary": "Get the path of the user style sheet in `~/.atom`.",
          "description": "Get the path of the user style sheet in `~/.atom`.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A singleton instance of this class available via `atom.styles`,\nwhich you can use to globally query and observe the set of active style\nsheets. The `StyleManager` doesn't add any style elements to the DOM on its\nown, but is instead subscribed to by individual `<atom-styles>` elements,\nwhich clone and attach style elements in different contexts.",
      "description": "A singleton instance of this class available via `atom.styles`,\nwhich you can use to globally query and observe the set of active style\nsheets. The `StyleManager` doesn't add any style elements to the DOM on its\nown, but is instead subscribed to by individual `<atom-styles>` elements,\nwhich clone and attach style elements in different contexts.\n\nSection: Atom "
    },
    "Switch": {
      "name": "Switch",
      "superClass": "React",
      "filename": "switch.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "A small React component which renders as a horizontal on/off switch.\nProvide it with `onChange` and `checked` props just like a checkbox:",
      "description": "A small React component which renders as a horizontal on/off switch.\nProvide it with `onChange` and `checked` props just like a checkbox:\n\n```\n<Switch onChange={@_onToggleChecked} checked={@state.form.isChecked} />\n```"
    },
    "Task": {
      "name": "Task",
      "filename": "src/task.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/task.coffee#L40",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Tasks represent individual changes to the datastore that\nalter the local cache and need to be synced back to the server.",
      "description": "Tasks represent individual changes to the datastore that\nalter the local cache and need to be synced back to the server.\n\nTo create a new task, subclass Task and implement the following methods:\n\n* performLocal:\n  Return a {Promise} that does work immediately. Must resolve or the task\n  will be thrown out. Generally, you should optimistically update\n  the local cache here.\n* performRemote:\n  Do work that requires dependencies to have resolved and may need to be\n  tried multiple times to succeed in case of network issues.\n  performRemote must return a {Promise}, and it should always resolve with\n  `Task.Status.Finished` or `Task.Status.Retry`. Rejections are considered\n  exception cases and are logged to our server.\n  Returning `Task.Status.Retry` will cause the `TaskQueue` to leave your task\n  on the queue and run it again later. You should only return `Task.Status.Retry`\n  if your task encountered a transient error (for example, a `0` but not a `400`).\n* shouldWaitForTask:\n  Tasks may be arbitrarily dependent on other tasks. To ensure that\n  `performRemote` is called at the right time, subclasses should implement\n  `shouldWaitForTask(other)`. For example, the `SendDraft` task is dependent\n  on the draft's files' `UploadFile` tasks completing.\n\nTasks may also implement `shouldDequeueOtherTask(other)`. Returning true\nwill cause the other event to be removed from the queue. This is useful in\noffline mode especially, when the user might `Save`,`Save`,`Save`,`Save`,`Send`.\nEach newly queued `Save` can cancel the (unstarted) save task in the queue.\n\nTasks that need to support undo/redo should implement `canBeUndone`, `isUndo`,\n`createUndoTask`, and `createIdenticalTask`."
    },
    "TaskQueue": {
      "name": "TaskQueue",
      "filename": "src/flux/stores/task-queue.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/task-queue.coffee#L67",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "findTask",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/task-queue.coffee#L106",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "type",
              "description": "The string name of the task class, or the Task class itself. (ie: {SaveDraftTask} or 'SaveDraftTask')",
              "type": "SaveDraftTask",
              "isOptional": false
            },
            {
              "name": "matching",
              "description": "Optional An {Object} with criteria to pass to _.isMatch. For a  SaveDraftTask, this could be {draftClientId: \"123123\"}",
              "type": "Object",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns an existing task in the queue that matches the type you provide,\nand any other match properties. Useful for checking to see if something, like\na \"SendDraft\" task is in-flight."
            },
            {
              "type": "Task",
              "description": "Returns a matching {Task}, or null."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The TaskQueue is a Flux-compatible Store that manages a queue of {Task}\nobjects. Each {Task} represents an individual API action, like sending a draft\nor marking a thread as \"read\". Tasks optimistically make changes to the app's\nlocal cache and encapsulate logic for performing changes on the server, rolling\nback in case of failure, and waiting on dependent tasks.",
      "description": "The TaskQueue is a Flux-compatible Store that manages a queue of {Task}\nobjects. Each {Task} represents an individual API action, like sending a draft\nor marking a thread as \"read\". Tasks optimistically make changes to the app's\nlocal cache and encapsulate logic for performing changes on the server, rolling\nback in case of failure, and waiting on dependent tasks.\n\nThe TaskQueue is essential to offline mode in N1. It automatically pauses\nwhen the user's internet connection is unavailable and resumes when online.\n\nThe task queue is persisted to disk, ensuring that tasks are executed later,\neven if the user quits N1.\n\nThe TaskQueue is only available in the app's main window. Rather than directly\nqueuing tasks, you should use the {Actions} to interact with the {TaskQueue}.\nTasks queued from secondary windows are serialized and sent to the application's\nmain window via IPC.\n\n## Queueing a Task\n\n```coffee\nif @_thread && @_thread.unread\n  Actions.queueTask(new ChangeStarredTask(thread: @_thread, starred: true))\n```\n\n## Dequeueing a Task\n\n```coffee\nActions.dequeueMatchingTask({\n  type: 'FileUploadTask',\n  matching: {\n    filePath: uploadData.filePath\n  }\n})\n```\n\n## Creating Tasks\n\nSupport for creating custom {Task} subclasses in third-party packages is coming soon.\nThis is currently blocked by the ActionBridge, which is responsible for sending actions\nbetween windows, since it's JSON serializer is not extensible.\n\nSection: Stores"
    },
    "TaskQueueStatusStore": {
      "name": "TaskQueueStatusStore",
      "superClass": "NylasStore",
      "filename": "src/flux/stores/task-queue-status-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/task-queue-status-store.coffee#L10",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The TaskQueueStatusStore allows you to inspect the task queue from\nany window, even though the queue itself only runs in the work window.",
      "description": "The TaskQueueStatusStore allows you to inspect the task queue from\nany window, even though the queue itself only runs in the work window."
    },
    "ThemeManager": {
      "name": "ThemeManager",
      "filename": "src/theme-manager.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/theme-manager.coffee#L19",
      "sections": [
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "Accessing Loaded Themes",
          "description": ""
        },
        {
          "name": "Accessing Active Themes",
          "description": ""
        },
        {
          "name": "Managing Enabled Themes",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "onDidChangeActiveThemes",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/theme-manager.coffee#L78",
          "visibility": "Essential",
          "summary": "Invoke `callback` when style sheet changes associated with\nupdating the list of active themes have completed.",
          "description": "Invoke `callback` when style sheet changes associated with\nupdating the list of active themes have completed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} ",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getLoadedThemeNames",
          "sectionName": "Accessing Loaded Themes",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/theme-manager.coffee#L154",
          "visibility": "Public",
          "summary": "Get an array of all the loaded theme names. ",
          "description": "Get an array of all the loaded theme names. "
        },
        {
          "name": "getLoadedThemes",
          "sectionName": "Accessing Loaded Themes",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/theme-manager.coffee#L162",
          "visibility": "Public",
          "summary": "Get an array of all the loaded themes. ",
          "description": "Get an array of all the loaded themes. "
        },
        {
          "name": "getActiveThemeNames",
          "sectionName": "Accessing Active Themes",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/theme-manager.coffee#L170",
          "visibility": "Public",
          "summary": "Get an array of all the active theme names. ",
          "description": "Get an array of all the active theme names. "
        },
        {
          "name": "getActiveThemes",
          "sectionName": "Accessing Active Themes",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/theme-manager.coffee#L178",
          "visibility": "Public",
          "summary": "Get an array of all the active themes. ",
          "description": "Get an array of all the active themes. "
        },
        {
          "name": "getEnabledThemeNames",
          "sectionName": "Managing Enabled Themes",
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/theme-manager.coffee#L190",
          "visibility": "Public",
          "summary": "Get the enabled theme names from the config.",
          "description": "Get the enabled theme names from the config.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of theme names in the order that they should be activated."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "Handles loading and activating available themes.",
      "description": "Handles loading and activating available themes.\n\nAn instance of this class is always available as the `atom.themes` global.\n\nSection: Atom "
    },
    "Thread": {
      "name": "Thread",
      "superClass": "Model",
      "filename": "src/flux/models/thread.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/thread.coffee#L42",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "categoryNamed",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/models/thread.coffee#L106",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "id",
              "description": "A {String} {Category} name",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Category",
              "description": "Returns true if the thread has a {Category} with the given\nname. Note, only `CategoryStore::standardCategories` have valid\n`names`"
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The Thread model represents a Thread object served by the Nylas Platform API.\nFor more information about Threads on the Nylas Platform, read the\n[Threads API Documentation](https://nylas.com/docs/api#threads)",
      "description": "The Thread model represents a Thread object served by the Nylas Platform API.\nFor more information about Threads on the Nylas Platform, read the\n[Threads API Documentation](https://nylas.com/docs/api#threads)\n\n## Attributes\n\n`snippet`: {AttributeString} A short, ~140 character string with the content\n   of the last message in the thread. Queryable.\n\n`subject`: {AttributeString} The subject of the thread. Queryable.\n\n`unread`: {AttributeBoolean} True if the thread is unread. Queryable.\n\n`starred`: {AttributeBoolean} True if the thread is starred. Queryable.\n\n`version`: {AttributeNumber} The version number of the thread.\n\n`participants`: {AttributeCollection} A set of {Contact} models\n   representing the participants in the thread.\n   Note: Contacts on Threads do not have IDs.\n\n`lastMessageReceivedTimestamp`: {AttributeDateTime} The timestamp of the\n   last message on the thread.\n\nThis class also inherits attributes from {Model}\n\nSection: Models"
    },
    "TimeoutTransitionGroupChild": {
      "name": "TimeoutTransitionGroupChild",
      "superClass": "React",
      "filename": "timeout-transition-group.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "TimeoutTransitionGroup applies a CSS transition to the components added\nor removed from it's children. It is similar to React's CSSTransitionGroup, but\nthat uses the 'transitionend' event, which browsers will not send for any\nnumber of reasons, including the transitioning node not being painted.",
      "description": "TimeoutTransitionGroup applies a CSS transition to the components added\nor removed from it's children. It is similar to React's CSSTransitionGroup, but\nthat uses the 'transitionend' event, which browsers will not send for any\nnumber of reasons, including the transitioning node not being painted.\n\nThis TimeoutTransitionGroup instead uses a user-defined timeout to determine\nwhen it is a good time to remove the component. Currently there is only one\ntimeout specified, but in the future it would be nice to be able to specify\nseparate timeouts for enter and leave, in case the timeouts for those\nanimations differ. Even nicer would be some sort of inspection of the CSS to\nautomatically determine the duration of the animation or transition.\n\nThis is adapted from Facebook's CSSTransitionGroup which is in the React\naddons and under the Apache 2.0 License.\n\nExample:\n\n```coffee\n<TimeoutTransitionGroup\n  leaveTimeout={125}\n  enterTimeout={125}\n  transitionName=\"sheet-toolbar\">\n  {toolbarElements[1..-1]}\n</TimeoutTransitionGroup>\n```\n\nSection: Component Kit"
    },
    "UnsafeComponent": {
      "name": "UnsafeComponent",
      "superClass": "React",
      "filename": "unsafe-component.coffee",
      "srcUrl": null,
      "sections": [],
      "classMethods": [],
      "instanceMethods": [],
      "classProperties": [
        {
          "name": "propTypes",
          "sectionName": null,
          "srcUrl": null,
          "visibility": "Public",
          "summary": "React `props` supported by UnsafeComponent:",
          "description": "React `props` supported by UnsafeComponent:",
          "arguments": [
            {
              "name": "component",
              "description": "The {React.Component} to display. All other props will be passed on to this component.",
              "type": "React.Component",
              "isOptional": false
            }
          ]
        }
      ],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "Renders a component provided via the `component` prop, and ensures that\nfailures in the component's code do not cause state inconsistencies elsewhere in\nthe application. This component is used by {InjectedComponent} and\n{InjectedComponentSet} to isolate third party code that could be buggy.",
      "description": "Renders a component provided via the `component` prop, and ensures that\nfailures in the component's code do not cause state inconsistencies elsewhere in\nthe application. This component is used by {InjectedComponent} and\n{InjectedComponentSet} to isolate third party code that could be buggy.\n\nOccasionally, having your component wrapped in {UnsafeComponent} can cause style\nissues. For example, in a Flexbox, the `div.unsafe-component-wrapper` will cause\nyour `flex` and `order` values to be one level too deep. For these scenarios,\nUnsafeComponent looks for `containerStyles` on your React component and attaches\nthem to the wrapper div:\n\n```coffee\nclass MyComponent extends React.Component\n  @displayName: 'MyComponent'\n  @containerStyles:\n    flex: 1\n    order: 2\n```\n\nSection: Component Kit"
    },
    "WorkspaceStore": {
      "name": "WorkspaceStore",
      "superClass": "NylasStore",
      "filename": "src/flux/stores/workspace-store.coffee",
      "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/workspace-store.coffee#L24",
      "sections": [],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "topSheet",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/workspace-store.coffee#L126",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Sheet",
              "description": "Returns The top {Sheet} in the current stack. Use this method to determine\nthe sheet the user is looking at."
            }
          ]
        },
        {
          "name": "rootSheet",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/workspace-store.coffee#L131",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Sheet",
              "description": "Returns The {Sheet} at the root of the current stack."
            }
          ]
        },
        {
          "name": "sheetStack",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/workspace-store.coffee#L136",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an {Array<Sheet>} The stack of sheets"
            }
          ]
        },
        {
          "name": "hiddenLocations",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/workspace-store.coffee#L141",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of locations that have been hidden."
            }
          ]
        },
        {
          "name": "isLocationHidden",
          "sectionName": null,
          "srcUrl": "https://github.com/nylas/edgehill/blob/v0.3.10/src/flux/stores/workspace-store.coffee#L146",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the location provided is hidden.\nYou should provide one of the WorkspaceStore.Location constant values."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Public",
      "summary": "The WorkspaceStore manages Sheets and layout modes in the application.\nObserving the WorkspaceStore makes it easy to monitor the sheet stack. To learn\nmore about sheets and layout in N1, see the {InterfaceConcepts.md}\ndocumentation.",
      "description": "The WorkspaceStore manages Sheets and layout modes in the application.\nObserving the WorkspaceStore makes it easy to monitor the sheet stack. To learn\nmore about sheets and layout in N1, see the {InterfaceConcepts.md}\ndocumentation.\n\nSection: Stores"
    }
  }
}